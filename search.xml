<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法学习&lt;Java&gt;笔记</title>
      <link href="article/c2e84310.html"/>
      <url>article/c2e84310.html</url>
      
        <content type="html"><![CDATA[<h1 id="循环与递归"><a href="#循环与递归" class="headerlink" title="循环与递归"></a>循环与递归</h1><ul><li>递归调用仅仅是被调函数恰为主调函数</li><li>注意每次调用的层次不同</li><li>注意每次分配形参并非同一个变量</li><li>注意返回的次序</li></ul><h2 id="Q：打印从0-n"><a href="#Q：打印从0-n" class="headerlink" title="Q：打印从0 - n"></a>Q：打印从0 - n</h2><ol><li><p>循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打印从0到n</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        fun(<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打印从0到n</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">if</span> (n&gt;<span class="number">0</span>) f(n-<span class="number">1</span>);</span><br><span class="line">        System.out.println(n);;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    f(<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Q：打印begin-end（递归）"><a href="#Q：打印begin-end（递归）" class="headerlink" title="Q：打印begin - end（递归）"></a>Q：打印begin - end（递归）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin&gt;end)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        System.out.println(begin);</span><br><span class="line">        f(begin+<span class="number">1</span>,end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        f(<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q：计算数组begin到结束的所有元素之和（递归）"><a href="#Q：计算数组begin到结束的所有元素之和（递归）" class="headerlink" title="Q：计算数组begin到结束的所有元素之和（递归）"></a>Q：计算数组begin到结束的所有元素之和（递归）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> begin)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin==a.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = f(a, begin+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> x+a[begin];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = f(a,<span class="number">0</span>); <span class="comment">//a 从第0项开始的累加值</span></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q：比较两个字符串是否相同"><a href="#Q：比较两个字符串是否相同" class="headerlink" title="Q：比较两个字符串是否相同"></a>Q：比较两个字符串是否相同</h2><ol><li><p>调用Java现成工具包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSameString</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.equals(s2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(isSameString(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abcd&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">f</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() != s2.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (s1.length()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (s1.charAt(<span class="number">0</span>) != s2.charAt(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> f(s1.substring(<span class="number">1</span>),s2.substring(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(f(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abcd&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数组</title>
      <link href="article/bd63f59d.html"/>
      <url>article/bd63f59d.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>数组也是一个对象</li><li>它和我们普通对象功能类似，也是用来存储一些值的</li><li>不同的是：<ul><li>普通对象是使用字符串作为属性名的</li><li>数组是使用数字来作为索引操作元素</li></ul></li><li>索引（index）<ul><li>从0开始的整数就是索引</li></ul></li><li>数组的存储性能比普通对象要高，在开发中我们经常使用数组来存储一些数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用typeof检查一个数组时，会返回object</span></span><br><span class="line"><span class="comment">//console.log(typeof arr);</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">33</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数组中的元素</span></span><br><span class="line"><span class="comment">// 语法：数组[索引]</span></span><br><span class="line"><span class="comment">// 如果读取不存在的索引，它不会报错，而是返回undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]);<span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line"><span class="comment">// 对于连续的数组，使用length可以获取到数组的长度（数的个数）</span></span><br><span class="line"><span class="comment">// 对于非连续的数组，使用length会获取到数组的最大索引+1</span></span><br><span class="line"><span class="comment">//          尽量不要创建非连续数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改length</span></span><br><span class="line"><span class="comment">//如果修改的length大于原长度，则多出来的部分会空出来</span></span><br><span class="line"><span class="comment">//如果修改的length小于原长度，则多出来的元素会被删除</span></span><br><span class="line">arr.length = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向数组的最后一个位置添加元素</span></span><br><span class="line">arr[arr.length] = <span class="number">70</span>;</span><br></pre></td></tr></table></figure><h1 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h1><ul><li><p>创建一个数组：<code>var arr = new Array();</code> </p></li><li><p>使用字面量来创建数组：<code>var arr = [];</code> </p></li><li><p>使用字面量创建数组时，可以在创建时就指定数组中的元素</p><p><code>var arr = [1，2，3，4，5，10];</code> </p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组，数组中只有一个元素10</span></span><br><span class="line">arr = [<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为10的数组</span></span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li><p>数组中的元素可以是任意数据类型</p><p><code>var arr = [&quot;hello&quot;,1,true,null,undefined];</code></p></li><li><p>也可以是对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;;</span><br><span class="line">arr[arr.length] = obj;</span><br><span class="line"></span><br><span class="line">arr2 = [&#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;沙和尚&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">1</span>].name);<span class="comment">// 猪八戒</span></span><br></pre></td></tr></table></figure></li><li><p>也可以是一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">2</span>)&#125;];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>]();</span><br></pre></td></tr></table></figure></li><li><p>也可以是一个数组，这种数组称为二维数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208210553411.png" alt="image-20201208210553411"></p></li></ul><h1 id="数组的四个方法"><a href="#数组的四个方法" class="headerlink" title="数组的四个方法"></a>数组的四个方法</h1><h2 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h2><ul><li><p>该方法可以向数组的末尾添加一个或多个元素，并返回数组新的长度</p></li><li><p>可以将要添加的元素作为方法的参数传递</p><p>这样这些元素将会自动添加到数组的末尾</p></li><li><p>该方法会将数组新的长度作为返回值返回</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line">arr.push(<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;蜘蛛精&quot;</span>,<span class="string">&quot;白骨精&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208211836183.png" alt="image-20201208211836183"></p><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><ul><li>该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line">arr.push(<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;蜘蛛精&quot;</span>,<span class="string">&quot;白骨精&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line">arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="keyword">var</span> result = arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;result = &quot;</span>+result);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208212615516.png" alt="image-20201208212615516"></p><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h2><ul><li>向数组开头添加一个或多个元素，并返回新的数组长度</li><li>向前面插入元素以后，其它元素索引会依次调整</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line">arr.push(<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;蜘蛛精&quot;</span>,<span class="string">&quot;白骨精&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line">arr.unshift(<span class="string">&quot;牛魔王&quot;</span>,<span class="string">&quot;二郎神&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208213540909.png" alt="image-20201208213540909"></p><h2 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h2><ul><li>删除数组的第一个元素，并将删除的元素作为返回值返回</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line">arr.push(<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;蜘蛛精&quot;</span>,<span class="string">&quot;白骨精&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="keyword">var</span> result = arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;result = &quot;</span>+result);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208214311158.png" alt="image-20201208214311158"></p><h1 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h1><ul><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219160306938.png" alt="image-20201219160306938"></p></li><li><p>进阶练习</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改Person原型的toString</span></span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Person[name=&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot;,age=&quot;</span>+<span class="built_in">this</span>.age+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Person对象</span></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>);</span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> Person(<span class="string">&quot;红孩儿&quot;</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> per4 = <span class="keyword">new</span> Person(<span class="string">&quot;蜘蛛精&quot;</span>,<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> per5 = <span class="keyword">new</span> Person(<span class="string">&quot;二郎神&quot;</span>,<span class="number">38</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//将这些person对象放入到一个数组中</span></span><br><span class="line"><span class="keyword">var</span> perArr = [per,per2,per3,per4,per5];</span><br><span class="line"><span class="built_in">console</span>.log(perArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">            创建一个函数，可以将perArr中的满18岁的Person提取出来</span></span><br><span class="line"><span class="comment">            然后封装到一个新的数组中返回</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//arr:形参，要提取信息的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAdult</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个新的数组</span></span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历arr，获取arr中的Person对象</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> p = arr[i];</span><br><span class="line">        <span class="comment">//判断Person对象的age是否大于等于18</span></span><br><span class="line">        <span class="keyword">if</span>(p.age &gt;=<span class="number">18</span>)&#123;</span><br><span class="line">            <span class="comment">//如果大于18，则将这个对象添加到newArr中</span></span><br><span class="line">            newArr.push(p);</span><br><span class="line">        &#125;                </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将新的数组返回</span></span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = getAdult(perArr);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219165037987.png" alt="image-20201219165037987"></p></li></ul><h1 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h1><ul><li><p>JS中还为我们提供了一个方法，用来遍历数组</p></li><li><p><code>forEach()</code> </p><ul><li>这个方法只支持IE9以上的浏览器</li></ul></li><li><p><code>forEach()</code>方法需要一个函数作为参数</p></li><li><p>像这种函数，由我们创建但是不由我们调用的，我们称为回调函数</p><ul><li>数组有几个元素函数就会执行几次</li><li>每次执行时，浏览器会将遍历到的元素以实参的形式传递进来</li><li>我们可以定义形参，来读取这些内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//由浏览器调用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>该程序将会输出4次<code>hello</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123; <span class="comment">//由浏览器调用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219171335408.png" alt="image-20201219171335408"></p></li><li><p>浏览器会在回调函数中传递三个参数</p><ul><li>第一个参数，就是当前正在遍历的元素value</li><li>第二个参数，就是当前正在遍历元素的索引index</li><li>第三个参数，就是正在便利的数组arr</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;);</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219172325084.png" alt="image-20201219172325084"></p></li></ul><h1 id="slice和splice"><a href="#slice和splice" class="headerlink" title="slice和splice"></a>slice和splice</h1><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><ul><li><p>可以用来从数组提取选定元素</p></li><li><p>该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p></li><li><p>参数：</p><ol><li>截取开始位置的索引，包含开始索引</li><li>截取结束位置的索引，不包含结束索引</li><li>第二个参数可以不写，此时会截取从开始索引往后的所有元素</li><li>索引可传递一个负值，如果传递一个负值，则从后往前计算</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.slice(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.slice(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">result = arr.slice(<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219174614779.png" alt="image-20201219174614779"></p></li></ul><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><ul><li><p>可以删除数组中的指定元素</p></li><li><p>使用<code>splice()</code>会影响到原数组，会将指定元素从原数组中删除</p><p>并将删除的元素作为返回值返回</p></li><li><p>参数：</p><ol><li>第一个参数：表示开始位置的索引</li><li>第二个参数：表示删除的数量</li><li>第三个及以后参数：可以传递一些新的元素，这些元素将会自动插入到开始位置的前面</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;牛魔王&quot;</span>,<span class="string">&quot;铁扇公主&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219175854305.png" alt="image-20201219175854305"></p></li></ul><h1 id="持续更新中。。。"><a href="#持续更新中。。。" class="headerlink" title="持续更新中。。。"></a>持续更新中。。。</h1>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript对象与函数_02</title>
      <link href="article/2bb77783.html"/>
      <url>article/2bb77783.html</url>
      
        <content type="html"><![CDATA[<h1 id="作用域（Scope）"><a href="#作用域（Scope）" class="headerlink" title="作用域（Scope）"></a>作用域（Scope）</h1><ul><li><p>一个变量的作用范围</p></li><li><p>在JS中一共有两种作用域：</p><ol><li>全局作用域</li><li>函数作用域</li></ol></li></ul><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><ul><li><p>直接编写在script标签中的JS代码，都在全局作用域</p></li><li><p>全局作用域在页面打开是创建，在页面关闭时销毁</p></li><li><p>在全局作用域中有一个全局对象window</p><p>它代表的是一个浏览器的窗口，我们可以直接使用</p></li><li><p>在全局作用域中：</p><p>创建的变量都会作为window对象的属性保存</p><p>创建的函数都会作为window对象的方法保存</p></li><li><p>全局作用域中的变量都是全局变量</p><p>在页面的任意部分都可以访问的到</p></li></ul><h3 id="变量的声明提前"><a href="#变量的声明提前" class="headerlink" title="变量的声明提前"></a>变量的声明提前</h3><ul><li>使用var关键字声明的变量，会在所有代码执行之前被声明</li><li>但是如果声明变量时不使用var关键字，则变量不会被提前声明</li></ul><h3 id="函数的声明提前"><a href="#函数的声明提前" class="headerlink" title="函数的声明提前"></a>函数的声明提前</h3><ul><li><p>使用<strong>函数声明</strong>形式创建的函数<code>function 函数()&#123;&#125;</code> </p><p>会在所有的代码执行之前就被创建，所以可以在函数声明前调用函数</p></li><li><p>使用<strong>函数表达式</strong>创建的函数，不会被声明提前，所以不能在声明前调用</p></li></ul><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><ul><li><p>调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁</p></li><li><p>每调用一次函数就会创建一个新的函数作用域，他们之间是相互独立的</p></li><li><p>在函数作用域中可以访问到全局作用域的变量</p><p>在全局作用域中无法访问到函数作用域的变量</p></li><li><p>当在函数作用域中操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用</p><p>如果没有则向上一级作用域中寻找，直到找到全局作用域</p><p>如果全局作用域中依然没有找到，则会报错<code>ReferenceError</code> </p></li><li><p>在函数中要访问全局变量可以使用window对象</p></li><li><p>在函数作用域也有声明提前的特性：</p><p>使用var关键字声明的变量，会在函数中所有代码执行之前被声明</p><p>函数声明也会在函数中所有代码执行之前执行</p></li><li><p>在函数中，不使用var声明的变量都会成为全局变量</p></li><li><p>定义形参就相当于在函数作用域中声明了变量</p></li></ul><h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><ul><li><p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数</p><p>这个隐含的参数就是this，this指向的是一个对象</p><p>这个对象我们称为上下文对象</p><p>根据函数的调用方式不同，this会指向不同的对象</p><ol><li>以函数的形式调用时，this永远都是window</li><li>以方法的形式调用时，this就是调用方法的那个对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line"><span class="comment">//输出的是Window对象</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    sayName:fun</span><br><span class="line">&#125;;</span><br><span class="line">obj.sayName();</span><br><span class="line"><span class="comment">//输出Object对象</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="this范例"><a href="#this范例" class="headerlink" title="this范例"></a>this范例</h2><ul><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个name变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;全局&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个fun()函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建两个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    sayName:fun</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name:<span class="string">&quot;沙和尚&quot;</span>,</span><br><span class="line">    sayName:fun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们希望调用obj.sayName()时可以输出obj的名字</span></span><br><span class="line">obj.sayName();</span><br><span class="line">obj2.sayName();</span><br></pre></td></tr></table></figure><p>输出结果为：</p></li></ul><center>孙悟空</center><center>沙和尚</center><h1 id="使用工厂方法创建对象"><a href="#使用工厂方法创建对象" class="headerlink" title="使用工厂方法创建对象"></a>使用工厂方法创建对象</h1><ul><li><p>通过该方法可以大批量的创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个新对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="comment">//向对象中添加属性</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    obj.gender = gender;</span><br><span class="line">    obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = createPerson(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = createPerson(<span class="string">&quot;白骨精&quot;</span>,<span class="number">16</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj3 = createPerson(<span class="string">&quot;蜘蛛精&quot;</span>,<span class="number">18</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj3);</span><br><span class="line"></span><br><span class="line">obj3.sayName();</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201206223213154.png" alt="image-20201206223213154"></p></li></ul><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><ul><li><p>使用工厂方法创建的对象，使用的构造函数都是Object</p><p>所以创建对象都是Object这个类型</p><p>导致我们无法区分多种不同类型的对象</p></li><li><p>创建一个构造函数，专门用来创建Person对象的</p><p>构造函数就是一个普通的函数，创建方式和普通函数没有区别</p><p>不同的是构造函数习惯上首字母大写</p></li><li><p>构造函数和普通函数的区别就是调用方式的不同</p><p>普通函数是直接调用，而构造函数需要使用new关键字来调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></li><li><p>构造函数的执行流程：</p><ol><li>立即创建一个新的对象</li><li>将新建的对象设置为函数中this，在构造函数中可以使用this来引用新的对象</li><li>逐行执行函数中的代码</li><li>将新建的对象作为返回值返回</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">&quot;玉兔精&quot;</span>,<span class="number">16</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> Person(<span class="string">&quot;奔波霸&quot;</span>,<span class="number">38</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per);</span><br><span class="line"><span class="built_in">console</span>.log(dog);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201207203128679.png" alt="image-20201207203128679"></p></li><li><p>使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个类</p><p>我们将通过一个构造函数创建的对象，称为该类的实例</p></li><li><p>this的情况：</p><ol><li>当以函数的形式调用时，this是window</li><li>当以方法的形式调用时，谁调用方法this就是谁</li><li>当以函数的形式调用时，this就是新创建的那个对象</li></ol></li><li><p>使用<code>instanceof</code>可以检查一个对象是否是一个类的实例</p><p>语法：</p><p>​    <code>对象 instanceof 构造函数</code> </p><p>如果是，则返回<code>true</code>，否则返回<code>false</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(per <span class="keyword">instanceof</span> Person);</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(dog <span class="keyword">instanceof</span> Person);</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>所有的对象都是<code>Object</code>的后代</p><p>所以任何对象和<code>Object</code>左<code>instanceof</code>检查时都会返回<code>true</code> </p></li></ul><h2 id="构造函数修改"><a href="#构造函数修改" class="headerlink" title="构造函数修改"></a>构造函数修改</h2><ul><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建一个Person构造函数</span></span><br><span class="line"><span class="comment">         *   - 在Person构造函数中，为每一个对象都添加了一个sayName方法，</span></span><br><span class="line"><span class="comment">         *       目前我们的方法是在构造函数内部创建的</span></span><br><span class="line"><span class="comment">         *           也就是构造函数每执行一次，就会创建一个新的sayName方法</span></span><br><span class="line"><span class="comment">         *       也就是所有实例的sayName都是唯一的</span></span><br><span class="line"><span class="comment">         *       这样就导致了构造函数每执行一次就会创建一个新的方法</span></span><br><span class="line"><span class="comment">         *           执行10000次就会创建10000个新的方法，而10000个方法都是一模一样的</span></span><br><span class="line"><span class="comment">         *           这是完全没有必要的，完全可以使所有的对象共享同一个方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    <span class="comment">//向对象中添加一个方法</span></span><br><span class="line">    <span class="built_in">this</span>.sayName = fun;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将sayName方法在全局作用域中定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;Hello大家好，我是：&quot;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个Person的实例</span></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per.sayName == per2.sayName);</span><br><span class="line">per.sayName();</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201207215534712.png" alt="image-20201207215534712"></p></li><li><p>将sayName方法在全局作用域中定义</p><ul><li>污染了全局作用域的命名空间</li><li>而且定义在全局作用域中也很不安全</li></ul></li></ul><h1 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h1><ul><li><p>我们所创建的每一个函数，解析器都会向函数中添加一个属性<code>prototype</code> </p><p>这个属性对应着一个对象，这个对象就是我们所谓的原型对象</p></li><li><p>如果函数作为普通函数调用，prototype没有任何作用</p></li><li><p>当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，我们可以通过<code>__proto__</code>来访问该属性</p></li><li><p>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象</p></li><li><p>我们可以将对象中共有的内容，统一设置到原型对象中</p></li><li><p>当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用</p><p>​    如果没有则会去原型对象中寻找，如果找到则直接使用</p></li><li><p>以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中</p><p>这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了</p></li><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Myclass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向Myclass的原型中添加属性a</span></span><br><span class="line">Myclass.prototype.a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向原型Myclass的原型中添加一个方法</span></span><br><span class="line">Myclass.prototype.sayHello =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mc =<span class="keyword">new</span> Myclass();</span><br><span class="line"><span class="keyword">var</span> mc2 = <span class="keyword">new</span> Myclass();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Myclass.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(mc2.__proto__ == Myclass.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向mc中添加a属性</span></span><br><span class="line">mc.a = <span class="string">&quot;我是mc中的a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mc2.a);</span><br><span class="line"></span><br><span class="line">mc.sayHello();</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201207224250389.png" alt="image-20201207224250389"></p><p>思维图如下：</p><p><img src="https://blog.ply.cool/image/image-20201207224420804.png" alt="image-20201207224420804"></p></li><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">         *创建一个构造函数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Myclass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向Myclass的原型中添加属性name</span></span><br><span class="line">Myclass.prototype.name = <span class="string">&quot;我是原型中的名字&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mc =<span class="keyword">new</span> Myclass();</span><br><span class="line">mc.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用in检查对象中是否含有某个属性时，如果对象中没有，但是原型中有，也会返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> mc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性</span></span><br><span class="line"><span class="comment">//使用该方法只有对象自身中含有属性时，才会返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(mc.hasOwnProperty(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(mc.hasOwnProperty(<span class="string">&quot;age&quot;</span>));</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208192156496.png" alt="image-20201208192156496"></p></li><li><p>原型对象也是对象，所以它也有原型</p><p>当我们使用一个对象的属性或方法时，会先在自身中寻找</p><p>自身中如果有，则直接使用，如果没有则去原型对象中寻找</p><p>如果原型对象中有，则使用，如果没有则去原型的原型中寻找</p><p>直到找到Object对象的原型，Object对象的原型没有原型</p><p>如果在Object中依然没有找到，则返回<code>undefined</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(mc.__proto__.__proto__.hasOwnProperty(<span class="string">&quot;hasOwnProperty&quot;</span>));</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>思维图如下：</p><p><img src="https://blog.ply.cool/image/image-20201208192945647.png" alt="image-20201208192945647"></p></li></ul><h1 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h1><ul><li><p>就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾</p><p>这些垃圾积攒过多以后，会导致程序运行的速度过慢</p><p>所以我们需要一个垃圾回收的机制，来处理程序运行中产生的垃圾</p></li><li><p>当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象</p><p>此时这种对象就是垃圾，这种对象过多占用大量的内存空间，导致程序运行变慢</p><p>所以这种垃圾必须清理</p></li><li><p>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁</p><p>我们不需要也不能进行垃圾回收的操作</p></li><li><p>我们需要做的只是将不再使用的对象设置为<code>null</code>即可</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常</title>
      <link href="article/f495a96f.html"/>
      <url>article/f495a96f.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h1><ul><li>软件程序在运行过程中，遇到的情况不可能是非常完美的，可能会存在各种问题，我们称为异常，英文：<code>Exception</code>，要让我们写出的程序作出合理的处理，而不至于程序崩溃。异常发生在程序运行期间，它影响了正常程序的执行流程。</li><li>异常分类：<ol><li>检查性异常</li><li>运行时异常</li><li>错误ERROR</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java12.jpg"></p><h1 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h1><ul><li><p>抛出异常</p></li><li><p>捕获异常</p></li><li><p>异常处理五个关键字</p></li><li><p>try，catch，finally，throw，throws</p></li><li><p>Demo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设要捕获多个异常：从小到大！</span></span><br><span class="line">        <span class="keyword">try</span> &#123;   <span class="comment">//try监控区域</span></span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Error e)&#123; <span class="comment">//catch(想要捕获的异常类型)  捕获异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;程序出现异常，变量b不能为0&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;     <span class="comment">//Throwable是最高层级的异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;。。。&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;  <span class="comment">//处理善后工作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;<span class="comment">//程序出现异常，变量b不能为0</span></span><br><span class="line">    &#125;    <span class="comment">//finally</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//finally   可以不要finally，假设IO，资源，关闭！</span></span><br></pre></td></tr></table></figure></li><li><p>IDEA快捷键：<code>Ctrl</code> + <code>Alt</code> +<code>T</code> 将选中部分代码用代码块包裹起来！</p></li><li><p>Demo2.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);<span class="comment">//终止程序0,1,2,3,4...都可以</span></span><br><span class="line">            e.printStackTrace();<span class="comment">//打印错误的栈信息</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Demo3.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Demo3().test(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//假设这个方法中处理不了这个异常，方法向上抛出</span></span><br><span class="line">    <span class="comment">//方法中用throw，方法外用throws</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();<span class="comment">//主动的抛出异常，一般在方法中使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><ul><li><p>用户自定义异常类，只需继承Exception类即可</p></li><li><p>MyException.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.exception.Ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="comment">//传递数字&gt;10;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//toString：异常的打印信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span> + detail + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.exception.Ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可能会存在异常的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">if</span> (a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(a);   <span class="comment">//抛出</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (MyException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyException=&gt;&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//传递的参数为：11</span></span><br><span class="line">&#125;    <span class="comment">//MyException=&gt;MyException&#123;11&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>实际应用中的经验总结</p><ul><li><p>处理运行时异常时，采用逻辑去合理规避同时辅助<code>try-catch</code>处理</p></li><li><p>在多重catch块后面，可以加一个<code>catch(Exception)</code>来处理可能会被遗漏的异常</p></li><li><p>对于不确定的代码，也可以加一个<code>try-catch</code>，处理潜在的异常</p><p>IDEA快捷键：<code>Alt</code> + <code>Enter</code>会提示异常的处理操作</p></li><li><p>尽量去处理异常，切忌只是简单地调用<code>printStackTrace()</code>去打印输出</p></li><li><p>具体如何处理异常，要根据不同的业务需求和异常类型去决定</p></li><li><p>尽量添加finally语句去释放占用的资源</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象</title>
      <link href="article/5f8d3e42.html"/>
      <url>article/5f8d3e42.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h1><ul><li><code>Java的核心思想就是OOP(面向对象编程)</code> </li><li>面向过程思想：<ul><li>步骤清晰简单，第一步做什么，第二步做什么</li><li>处理简单问题</li></ul></li><li>面向对象思想：<ul><li>物以类聚，<code>分类</code>的思维方式</li><li>处理复杂问题</li></ul></li><li><code>类 = 属性 + 方法</code> </li></ul><h2 id="面向对象的本质"><a href="#面向对象的本质" class="headerlink" title="面向对象的本质"></a>面向对象的本质</h2><ul><li><p><code>以类的方式组织代码，以对象的形式组织(封装)数据</code> </p></li><li><p>三大特性：</p><ul><li><code>封装</code></li><li><code>继承</code></li><li><code>多态</code></li></ul></li></ul><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    修饰符 返回值类型 方法名(...)&#123;</span></span><br><span class="line"><span class="comment">        //方法体</span></span><br><span class="line"><span class="comment">        return 返回值;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//return 结束方法，返回一个结果！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;b ? a : b; <span class="comment">//三元运算符！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><h3 id="静态方法的调用"><a href="#静态方法的调用" class="headerlink" title="静态方法的调用"></a>静态方法的调用</h3><ul><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生说话了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Demo02.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student.say();<span class="comment">//静态方法可以通过类名.方法名进行调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="非静态方法的调用"><a href="#非静态方法的调用" class="headerlink" title="非静态方法的调用"></a>非静态方法的调用</h3><ul><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非静态方法static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生说话了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Demo02.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实例化这个类 new</span></span><br><span class="line">        <span class="comment">//对象类型 对象名 = 对象值;</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加static的方法是<code>和类一起加载的，时间片更早</code> </p></li><li><p>不加static的方法是在<code>类实例化之后才存在</code>的。</p><p>如果一个实例化的类或方法调用一个没有实例化的方法，则需要将该方法实例化。</p><p>通常通过new的方法来实现。</p></li></ul><h3 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h3><ul><li>形参是参数的名字，实参是真实的值</li><li>实际参数与形式参数的类型要对应</li></ul><h1 id="类与对象的创建"><a href="#类与对象的创建" class="headerlink" title="类与对象的创建"></a>类与对象的创建</h1><ul><li><p>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物</p></li><li><p>对象是抽象概念的具体实例</p></li><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性：字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;在学习&quot;</span>);<span class="comment">//this表示当前类下这个学生</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个项目应该只有一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类：抽象的，实例化</span></span><br><span class="line">        <span class="comment">//类实例化后会返回一个自己的对象！</span></span><br><span class="line">        <span class="comment">//student对象就是一个Student类的具体实例！</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        Student xiaoming = <span class="keyword">new</span> Student();</span><br><span class="line">        Student xiaohong = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        xiaoming.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        xiaoming.age = <span class="number">3</span>;</span><br><span class="line">        xiaoming.study();</span><br><span class="line"></span><br><span class="line">        System.out.println(xiaoming.name);</span><br><span class="line">        System.out.println(xiaoming.age);</span><br><span class="line"></span><br><span class="line">        xiaohong.name = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">        xiaohong.age = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(xiaohong.name);</span><br><span class="line">        System.out.println(xiaohong.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">            小明在学习</span></span><br><span class="line"><span class="comment">            小明</span></span><br><span class="line"><span class="comment">            3</span></span><br><span class="line"><span class="comment">            小红</span></span><br><span class="line"><span class="comment">            4</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="构造器详解"><a href="#构造器详解" class="headerlink" title="构造器详解"></a>构造器详解</h1><ul><li><p>类中的构造器也称构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：</p><ol><li>必须和类的名字相同</li><li>必须没有返回类型，也不能写void</li></ol></li><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一个类即使什么都不写，它也会存在一个构造方法</span></span><br><span class="line">    <span class="comment">//显示的定义构造器</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化</span></span><br><span class="line">    <span class="comment">//1.使用new关键字，本质是在调用构造器</span></span><br><span class="line">    <span class="comment">//2.用来初始化值</span></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;秦疆&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造：一旦定义了有参构造，无参就必须显示定义（方法重载）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="comment">//前一个name表示类中定义的字符串name</span></span><br><span class="line">        <span class="comment">//后一个name表示传进来的参数name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个项目应该只有一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//new 实例化一个对象</span></span><br><span class="line">        <span class="comment">//Person person = new Person();</span></span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;狂神&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>IDEA快捷键：<code>Alt</code> + <code>Insert</code> 快速定义有参或无参构造</p></li><li><p>注意点：<code>定义有参构造之后，如果想使用无参构造，显示的定义一个无参构造</code> </p></li></ul><h1 id="创建对象内存分析"><a href="#创建对象内存分析" class="headerlink" title="创建对象内存分析"></a>创建对象内存分析</h1><ul><li><p>Pet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;叫了一声&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo3.Pet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pet dog = <span class="keyword">new</span> Pet();</span><br><span class="line">        dog.name = <span class="string">&quot;旺财&quot;</span>;</span><br><span class="line">        dog.age = <span class="number">3</span>;</span><br><span class="line">        dog.shout();</span><br><span class="line">        System.out.println(dog.name);</span><br><span class="line">        System.out.println(dog.age);</span><br><span class="line"></span><br><span class="line">        Pet cat = <span class="keyword">new</span> Pet();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>内存分析</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java11.jpg"></p></li></ul><h1 id="小结类与对象"><a href="#小结类与对象" class="headerlink" title="小结类与对象"></a>小结类与对象</h1><ol><li><p>类与对象：</p><p>类是一个模板：抽象，对象是一个具体的实例</p></li><li><p>方法：</p><p>定义，调用！</p></li><li><p>对应的引用：</p><p>引用类型； 基本类型 (8)</p><p>对象是通过引用来操作的：栈 —&gt; 堆</p></li><li><p>属性：字段Feild 成员变量</p><p>默认初始化：</p><p>​    数字：0    0.0</p><p>​    char:    u0000</p><p>​    boolean:    false</p><p>​    引用：    null</p><p>修饰符    属性类型    属性名 = 属性值！</p></li><li><p>对象的创建和使用：</p><ul><li>必须使用new 关键字创造对象，构造器    <code>Person kuangshen = new Person();</code> </li><li>对象的属性 <code>kuangshen.name</code> </li><li>对象的方法 <code>kuangshen.sleep()</code> </li></ul></li><li><p>类：</p><p>静态的属性    属性</p><p>动态的行为    方法</p></li></ol><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><ul><li><p>该露的露，该藏的藏</p><ul><li>程序设计要追求“<code>高内聚，低耦合</code>”。</li><li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉。</li><li>低耦合：仅暴露少量的方法给外部使用。</li></ul></li><li><p>封装(数据的隐藏)</p><ul><li>通常，应禁止直接访问一个对象中数据的实际表示，而应该通过操作接口来访问，这称为信息隐藏。</li></ul></li><li><p>记住这句话就够了：<code>属性私有，get/set</code> </p></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo4;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类     private:私有</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;<span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一些可以操作这个属性的方法</span></span><br><span class="line">    <span class="comment">//提供一些public 的 get,set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get获得这个数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//set给这个数据设置值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo4.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setName(<span class="string">&quot;秦疆&quot;</span>);</span><br><span class="line">        System.out.println(s1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>IDEA快捷键：<code>Alt</code> + <code>Insert</code>快速生成get/set方法</p></li><li><p>封装的妙用(判断数据合法性)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (age&gt;<span class="number">120</span> || age&lt;<span class="number">0</span>)&#123; <span class="comment">//不合法</span></span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装的意义：</p><ol><li>提高程序的安全性，保护数据。</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统的可维护性提高了</li></ol></li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul><li><p>继承的本质是对某一类的抽象，从而实现对现实更好的建模</p></li><li><p><code>extends</code>的意思是“扩展“。子类是父类的扩展</p></li><li><p>在Java中，所有的类，都默认直接或间接继承Object</p></li><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo5;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Person 父类，基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;说了一句话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo5;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student 派生类，子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo5.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.say();</span><br><span class="line">    &#125;<span class="comment">//说了一句话</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>IDEA快捷键：<code>Ctrl</code> + <code>H</code> 查看当前类的树结构</p></li><li><p>Java中类只有单继承，没有多继承！</p><p><del>一个儿子只能有一个爸爸，但是一个爸爸可以有多个儿子🤪</del></p></li></ul><h1 id="super详解"><a href="#super详解" class="headerlink" title="super详解"></a>super详解</h1><h2 id="super注意点："><a href="#super注意点：" class="headerlink" title="super注意点："></a>super注意点：</h2><ol><li>super调用父类的构造方法，必须在构造方法的第一个！</li><li>super必须只能出现在子类的方法或者构造方法中！</li><li>super和this不能同时调用构造方法！</li></ol><h2 id="VS-this："><a href="#VS-this：" class="headerlink" title="VS this："></a>VS this：</h2><ol><li><p>代表的对象不同：</p><ul><li>this：本身调用者这个对象</li><li>super：代表父类对象的应用</li></ul></li><li><p>前提</p><ul><li>this：没有继承也可以使用</li><li>super：只能在继承条件下才可以使用</li></ul></li><li><p>构造方法：</p><ul><li>this()：本类的构造</li><li>super()：父类的构造</li></ul></li></ol><ul><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person无参构造执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> String name = <span class="string">&quot;kuangshen&quot;</span>;</span><br><span class="line">    <span class="comment">//私有的东西无法被继承</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo6;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类继承了父类，就会拥有父类的全部的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//隐藏代码：调用了父类的无参构造</span></span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">//调用父类的构造器，必须要在子类构造器的第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Student无参构造执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;qinjiang&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        print();<span class="comment">//Student</span></span><br><span class="line">        <span class="keyword">this</span>.print();<span class="comment">//Student</span></span><br><span class="line">        <span class="keyword">super</span>.print();<span class="comment">//Person</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name);<span class="comment">//秦疆</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);<span class="comment">//qinjiang</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);<span class="comment">//kuangshen</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo6.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//student.test(&quot;秦疆&quot;);</span></span><br><span class="line">        <span class="comment">//student.test1();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><ul><li><p>需要有继承关系，子类重写父类的方法！</p><ol><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大但不能缩小：<code>public</code>&gt;<code>protected</code>&gt;<code>default</code>&gt;<code>private</code> </li><li>抛出的异常：范围，可以缩小，但不能扩大： <code>ClassNotFoundException</code> –&gt; <code>Exception(大)</code> </li></ol></li><li><p>重写，子类的方法和父类必要一致；方法体不同！</p></li><li><p>为什么需要重写：</p><p>父类的功能，子类不一定需要，或者不一定满足！</p><p>IDEA快捷键：<code>Alt</code> + <code>Insert</code> : <code>override</code>;</p></li></ul><h2 id="Demo1-静态方法的重写"><a href="#Demo1-静态方法的重写" class="headerlink" title="Demo1(静态方法的重写)"></a>Demo1(静态方法的重写)</h2><ul><li><p>B.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo7;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写都是方法的重写，和属性无关</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>A.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo7.A;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo7.B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法的调用只和左边，定义的数据类型有关</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.test();<span class="comment">//A=&gt;test()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        B b = <span class="keyword">new</span> A();</span><br><span class="line">        b.test();<span class="comment">//B=&gt;test()</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Demo2-非静态方法的重写"><a href="#Demo2-非静态方法的重写" class="headerlink" title="Demo2(非静态方法的重写)"></a>Demo2(非静态方法的重写)</h2><ul><li><p>B.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo7;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写都是方法的重写，和属性无关</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>A.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo7;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Override 重写</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//注解：有功能的注释！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo7.A;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo7.B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态的方法和非静态的方法区别很大！</span></span><br><span class="line">        <span class="comment">//静态的方法：方法的调用只和左边，定义的数据类型有关</span></span><br><span class="line">        <span class="comment">//非静态：重写 //必须是public类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法的调用只和左边，定义的数据类型有关</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.test();<span class="comment">//A=&gt;test()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        B b = <span class="keyword">new</span> A();<span class="comment">//子类重写了父类的方法</span></span><br><span class="line">        b.test();<span class="comment">//A=&gt;test()</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><ul><li><p>同一方法可以根据发送对象的不同而采取多种不同的行为方式</p></li><li><p>多态注意事项：</p><ol><li><p>多态是方法的多态，属性没有多态</p></li><li><p>父类和子类，有联系 <del>类型转换异常！<code>ClassCastException! </code></del> </p></li><li><p>存在条件：</p><p>​    继承关系</p><p>​    方法需要重写</p><p>​    父类引用指向子类对象！</p><p><code>Father f1 = new Son();</code> </p></li><li><p>以下三种方法无法被重写：</p><ul><li><p>static 方法，属于类，它不属于实例；</p></li><li><p>final 常量；</p></li><li><p>private 方法，私有方法；</p></li></ul></li></ol></li><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Person;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一个对象的实际类型是确定的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以指向的引用类型就不确定了：父类的引用指向子类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Student能调用的方法都是自己的或者继承父类的</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Person父类型，可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Object类是所有类的祖宗类</span></span><br><span class="line">        Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象能执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class="line">        s2.run();<span class="comment">//son//子类重写了父类方法，执行子类方法</span></span><br><span class="line">        s1.run();<span class="comment">//son</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="instanceof和类型转换"><a href="#instanceof和类型转换" class="headerlink" title="instanceof和类型转换"></a>instanceof和类型转换</h1><ul><li><p><code>instanceof</code>判断两个类之间是否存在父子关系 (类型转换)引用类型，判断一个对象是什么类型~</p></li><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;go&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Teacher.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><ul><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Person;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Student;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Object &gt; String</span></span><br><span class="line">        <span class="comment">//Object &gt; Person &gt; Teacher</span></span><br><span class="line">        <span class="comment">//Object &gt; Person &gt; Student</span></span><br><span class="line">        Object object = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(X instanceof Y);//能不能编译通过看是否有父子关系</span></span><br><span class="line"></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//System.out.println(person instanceof String);//编译报错！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Person;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Student;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类型之间的转化：父 子</span></span><br><span class="line">        <span class="comment">//高         低</span></span><br><span class="line">        Person obj = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Student将这个对象转换为Student类型，我们就可以使用Student类型的方法了！</span></span><br><span class="line">        ((Student)obj).go();<span class="comment">//强转</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子类转换父类可能会丢失自己本来的一些方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.go();</span><br><span class="line">        Person person = student;<span class="comment">//自动转换</span></span><br></pre></td></tr></table></figure></li></ul><ol><li>父类引用指向子类的对象；</li><li>把子类转换为父类，向上转型；</li><li>把父类转换为子类，向下转型；强制转换</li><li>方便方法的调用，减少重复代码！简洁</li></ol><p>🤔抽象：封装，继承，多态</p><h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><ul><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo9;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age;<span class="comment">//静态的变量 多线程！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;<span class="comment">//非静态的变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Student s1 = new Student();</span></span><br><span class="line"><span class="comment">//        System.out.println(Student.age);</span></span><br><span class="line"><span class="comment">//        System.out.println(s1.age);</span></span><br><span class="line"><span class="comment">//        System.out.println(s1.score);</span></span><br><span class="line">        <span class="keyword">new</span> Student().run();</span><br><span class="line">        Student.go();</span><br><span class="line">        go();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输出顺序：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2：赋初值~</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1：只执行一次~</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果如下：</span></span><br><span class="line">    静态代码块</span><br><span class="line">    匿名代码块</span><br><span class="line">    构造方法</span><br><span class="line">    ===============</span><br><span class="line">    匿名代码块</span><br><span class="line">    构造方法</span><br></pre></td></tr></table></figure></li></ul><h2 id="静态导入包"><a href="#静态导入包" class="headerlink" title="静态导入包"></a>静态导入包</h2><ul><li><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo9;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态导入包~</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(random());</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><ul><li><p>不能new抽象类，只能靠子类去实现它：约束！</p></li><li><p>抽象类中可以写普通的方法~</p></li><li><p>抽象方法必须在抽象类中~</p></li><li><p>抽象的抽象：约束~</p></li><li><p>存在意义：提高开发效率！</p></li><li><p>Action.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo10;</span><br><span class="line"></span><br><span class="line"><span class="comment">//abstract 抽象类：类 extends:单继承~    （接口可多继承）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//约束~有人帮我们实现</span></span><br><span class="line">    <span class="comment">//abstract，抽象方法，只有方法名字，没有方法的实现！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>A.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo10;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类的所有方法，继承了它的子类都必须要实现它的方法~除非子类也是抽象类，就有子子类来重写它的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul><li><p>普通类：只有具体实现</p></li><li><p>抽象类：具体实现和规范（抽象方法）都有！</p></li><li><p>接口：只有规范！自己无法写方法~专业的约束！约束和实现分离：面向接口编程</p></li><li><p><code>接口的本质是契约</code>，就像我们人间的法律一样。制定好后大家都遵守。</p></li><li><p>OO的精髓，是对对象的抽象，最能体现这一点的就是接口。</p></li></ul><div class="tip success"><p>声明类的关键字是class，声明接口的关键字是interface</p><p></p></div><ul><li><p>UserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo11;</span><br><span class="line"></span><br><span class="line"><span class="comment">//interface 定义的关键字,接口都需要有实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//常量~ public static final</span></span><br><span class="line">    <span class="keyword">int</span> AGE = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口中的所有定义的方法其实都是抽象的 public abstract</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TimeService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo11;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类：extends~</span></span><br><span class="line"><span class="comment">//类 可以实现接口 implements 接口</span></span><br><span class="line"><span class="comment">//实现了接口的类，就需要重写接口中的方法~</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多继承~ 利用接口实现多继承~</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>,<span class="title">TimeService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作用：</p><ol><li>约束</li><li>定义一些方法，让不同的人实现~</li><li>public abstract</li><li>public static final</li><li>接口不能被实例化<del>，接口中没有构造方法</del></li><li>implements可以实现多个接口</li><li>必须要重写接口中的方法~</li></ol></li></ul><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><ul><li><p>内部类就是在一个类的内部再定义一个类。</p><p>比如：A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了。</p></li><li><p>分类：</p><ul><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ul></li><li><p>Outer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//加static即为静态内部类，那么getID方法将无法使用，因为static时间片更早</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得外部类的私有属性~</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo12.Outer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">//通过这个外部类来实例化内部类~</span></span><br><span class="line">        Outer.Inner inner = outer.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.in();</span><br><span class="line">        inner.getID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得外部类的私有属性~</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="article/e3345db4.html"/>
      <url>article/e3345db4.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h1><ul><li>数组是相同类型数据的有序集合。</li></ul><h1 id="数组的声明创建"><a href="#数组的声明创建" class="headerlink" title="数组的声明创建"></a>数组的声明创建</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个数组</span></span><br><span class="line"><span class="keyword">int</span>[] nums;<span class="comment">//1.声明一个数组</span></span><br><span class="line"><span class="keyword">int</span> nums2[];</span><br><span class="line"><span class="comment">//两种方法都可以声明一个整型数组，但建议使用第一个</span></span><br><span class="line">nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//2.创建一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以这样写</span></span><br><span class="line"><span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//声明并创建一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.给数组元素赋值</span></span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">nums[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">nums[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">nums[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">nums[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">nums[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">nums[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">nums[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//int类型数组未赋值的元素默认值是0</span></span><br></pre></td></tr></table></figure><ul><li>获取数组长度：arrays.length。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算所有元素的和</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">    sum = sum + nums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h1><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java9.jpg"></p><h1 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h1><ol><li><p>静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,&#125;;<span class="comment">//一旦定义不可改变</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>动态初始化(包含默认初始化)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>数组的默认初始化</li></ol><h1 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h1><ol><li><p>长度确定。数组一旦被创建，它的大小就不可以改变。</p></li><li><p>元素必须是相同类型，不允许出现混合类型。</p></li><li><p>数组中的元素可以是任意数据类型，包括基本类型和引用类型。</p></li><li><p>数组本身就是对象，可以无限套娃。<code>数组对象本身是在堆中</code>。</p></li></ol><h1 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h1><ul><li>下标的合法区间：<code>[0,length-1]</code>，如果越界就会报错。</li></ul><h1 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//计算所有元素的和</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        sum += arrays[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);<span class="comment">//sum=15</span></span><br><span class="line">    <span class="comment">//查找最大元素</span></span><br><span class="line">    <span class="keyword">int</span> max =arrays[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrays[i]&gt;max)&#123;</span><br><span class="line">            max = arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;max=&quot;</span>+max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a>For-Each循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> array: arrays) &#123;</span><br><span class="line">    System.out.println(array);</span><br><span class="line">&#125;<span class="comment">//遍历每一个元素</span></span><br><span class="line"><span class="comment">//缺点：没有下标，不方便对某个元素操作</span></span><br></pre></td></tr></table></figure><h2 id="数组作为方法入参"><a href="#数组作为方法入参" class="headerlink" title="数组作为方法入参"></a>数组作为方法入参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个方法，打印数组元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        System.out.print(arrays[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组作返回值"><a href="#数组作返回值" class="headerlink" title="数组作返回值"></a>数组作返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个方法，反转数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[] arrays)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arrays.length];</span><br><span class="line">    <span class="comment">//反转的操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,j = result.length-<span class="number">1</span>; i &lt; arrays.length; i++,j--) &#123;</span><br><span class="line">        result[j] = arrays[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        printArray(arrays);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">int</span>[] reverse = reverse(arrays);</span><br><span class="line">        printArray(reverse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个方法，打印数组元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个方法，反转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[] arrays)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arrays.length];</span><br><span class="line">        <span class="comment">//反转的操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,j = result.length-<span class="number">1</span>; i &lt; arrays.length; i++,j--) &#123;</span><br><span class="line">            result[j] = arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><ul><li><p>一般我们这样定义一个数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;; </span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>int a[][] = new int[2][5];</code> </p><p>以上二维数组a可以看成一个两行五列数组。</p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">//打印二维数组的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">            System.out.println(array[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h1><ul><li><code>import java.util.Arrays;</code> </li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6485</span>,<span class="number">4564</span>,<span class="number">789</span>,<span class="number">26</span>&#125;;</span><br><span class="line">        <span class="comment">//打印数组元素Array.toString</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        Arrays.sort(a);<span class="comment">//数组进行排序</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[1, 5, 7, 6485, 4564, 789, 26]</span></span><br><span class="line"><span class="comment">//[1, 5, 7, 26, 789, 4564, 6485]</span></span><br></pre></td></tr></table></figure><ul><li><p>具有以下常用功能：</p><ul><li><p>给数组赋值：通过fill方法。</p></li><li><p>对数组排序：通过sort方法，按升序。</p></li><li><p>比较数组：通过equals方法比较数组中元素值是否相等。</p></li><li><p>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找法操作。</p></li></ul></li></ul><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><ol><li><p>比较数组中，两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置。</p></li><li><p>每一次比较，都会产出一个最大，或者最小的数字。</p></li><li><p>下一轮则可以少一次排序。</p></li><li><p>依次循环，直到结束。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">45</span>,<span class="number">1574</span>,<span class="number">18574</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">78</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] sort = sort(a);<span class="comment">//调用完我们自己写的排序算法后，返回一个排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(sort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">        <span class="comment">//临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外层循环，判断我们要走多少次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内层循环，比价判断两个数，如果第一个数比第二个数大，则交换位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j+<span class="number">1</span>]&lt;array[j])&#123;</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度优化"><a href="#时间复杂度优化" class="headerlink" title="时间复杂度优化"></a>时间复杂度优化</h2><ul><li>通过定义一个布尔值，在外层循环下，默认为<code>false</code>，在内层循环内，将布尔值重改为<code>true</code>，然后每当内层循环结束后判断布尔值是否为<code>false</code>，如果为<code>false</code>，表明排序已完成，直接跳出外层循环。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">45</span>,<span class="number">1574</span>,<span class="number">18574</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">78</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] sort = sort(a);<span class="comment">//调用完我们自己写的排序算法后，返回一个排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(sort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">        <span class="comment">//临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外层循环，判断我们要走多少次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内层循环，比价判断两个数，如果第一个数比第二个数大，则交换位置</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j+<span class="number">1</span>]&lt;array[j])&#123;</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag==<span class="keyword">false</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h1><ul><li><p>二维数组中如果很多值都是0或者同一数值时，意味着记录了很多没有意义的数据。采用稀疏数组是不错的选择。</p></li><li><p>稀疏数组的处理方式是：</p><ul><li><p>记录数组一共有几行几列，有多少个不同值。</p></li><li><p>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模。</p></li></ul></li></ul><h2 id="原始数组"><a href="#原始数组" class="headerlink" title="原始数组"></a>原始数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个二维数组 11*11   0：没有棋子   1：黑棋   2：白棋</span></span><br><span class="line">        <span class="keyword">int</span> [][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出原始的数组：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="稀疏数组-1"><a href="#稀疏数组-1" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个二维数组 11*11   0：没有棋子   1：黑棋   2：白棋</span></span><br><span class="line">        <span class="keyword">int</span> [][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出原始的数组：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//转化为稀疏数组保存</span></span><br><span class="line">        <span class="comment">//获取有效值的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;有效值个数为：&quot;</span>+sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个稀疏数组的数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历二维数组，将非零的值存放在稀疏数组中</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>]+<span class="string">&quot;\t&quot;</span></span><br><span class="line">                    +array2[i][<span class="number">1</span>]+<span class="string">&quot;\t&quot;</span></span><br><span class="line">                    +array2[i][<span class="number">2</span>]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;还原&quot;</span>);</span><br><span class="line">        <span class="comment">//读取稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="comment">//给其中的元素还原值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输出还原的数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array3) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java10.jpg"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法</title>
      <link href="article/7a37a823.html"/>
      <url>article/7a37a823.html</url>
      
        <content type="html"><![CDATA[<h1 id="何谓方法"><a href="#何谓方法" class="headerlink" title="何谓方法"></a>何谓方法</h1><ul><li><p><code>System.out.println()</code>   //<code>类</code>.<code>对象</code>.<code>方法</code><br>//调用系统类中的标准输出对象<code>out</code>中的方法<code>println()</code></p></li><li><p>方法是语句的集合，他们在一起执行一个功能</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其它地方被引用</li></ul></li><li><p>原子性：一个方法只能完成一个功能，这样利于后期扩展</p></li></ul><h1 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = add(<span class="number">1</span>,<span class="number">2</span>);   <span class="comment">//调用方法</span></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//public表示外部类可以访问(修饰符)</span></span><br><span class="line"><span class="comment">//static转化为类变量就可以被main方法调用(修饰符)</span></span><br><span class="line"><span class="comment">//有返回值加void，并要有return；无返回值不加</span></span><br></pre></td></tr></table></figure><ul><li><p>方法类似其它语言的函数</p></li><li><p><code>return 0;</code>可用来终止某个方法</p></li><li><p>Java是值传递</p></li></ul><h1 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h1><ul><li>重载就是在一个类中，有相同的函数名称，但形参不同的函数</li></ul><h1 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//args.length 数组长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;]:&quot;</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在命令行中编译，传参，输出</li></ul><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java07.jpg" width="75%"><h1 id="可变参数-不定向参数"><a href="#可变参数-不定向参数" class="headerlink" title="可变参数(不定向参数)"></a>可变参数(不定向参数)</h1><ul><li><p>在方法声明中，在指定参数类型后加一个省略号(…)</p></li><li><p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            Demo03 demo03 = <span class="keyword">new</span> Demo03();</span><br><span class="line">            demo03.test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>... i)</span></span>&#123;</span><br><span class="line">        System.out.println(i[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">3</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">4</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">5</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果为</li></ul><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java8.jpg" width="50%"><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><ul><li>递归就是A方法调用A方法，就是自己调用自己</li><li>递归结构包括两个部分：<ul><li>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环</li><li>递归体：什么时候需要调用自身方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用递归的方法计算4的阶乘</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(f(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n ==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n*f(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为 24</span></span><br></pre></td></tr></table></figure><ul><li>递归方便了程序员，难为了电脑。因为Java采用栈内存，会不断将调用函数压入栈。如果深度足够大，会造成崩溃。</li><li><code>能不用递归就不用递归</code></li><li>小计算可以用递归</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制</title>
      <link href="article/41201b24.html"/>
      <url>article/41201b24.html</url>
      
        <content type="html"><![CDATA[<h1 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h1><h2 id="next-方法"><a href="#next-方法" class="headerlink" title="next()方法"></a>next()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个扫描器对象，用于接收键盘数据</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方式接受：&quot;</span>);</span><br><span class="line">        <span class="comment">//判断用户有没有输入字符串</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext())&#123;   <span class="comment">//if判断非必要</span></span><br><span class="line">            <span class="comment">//使用next方式接收</span></span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源，要养成良好习惯，用完就关掉</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行效果如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java04.jpg"></p><ul><li>因为使用的是<code>next方法</code>，所以只能接收一个字符串 </li></ul><h2 id="nextLine-方法"><a href="#nextLine-方法" class="headerlink" title="nextLine()方法"></a>nextLine()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//接收键盘数据</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用nextLine方式接受：&quot;</span>);</span><br><span class="line">        <span class="comment">//判断是否还有输入</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextLine())&#123;   <span class="comment">//if判断非必要</span></span><br><span class="line">            String str = scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源，要养成良好习惯，用完就关掉</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行效果如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java05.jpg"></p><h2 id="next-与nextLine-区别"><a href="#next-与nextLine-区别" class="headerlink" title="next()与nextLine()区别"></a>next()与nextLine()区别</h2><ul><li><p>next()</p><ol><li>一定要读取到有效字符后才可以结束输入</li><li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉</li><li>只有输入有效字符后才能将其后面输入的空白作为分隔符或结束符</li><li><code>next()不能得到带有空格的字符串</code> </li></ol></li><li><p>nextLine()</p><ol><li>以Enter(回车)为结束符，也就是说，nextLine()方法返回的是输入回车之前的所有字符</li><li>可以获得空白</li></ol></li></ul><h2 id="Scanner进阶使用"><a href="#Scanner进阶使用" class="headerlink" title="Scanner进阶使用"></a>Scanner进阶使用</h2><h3 id="Example1"><a href="#Example1" class="headerlink" title="Example1:"></a>Example1:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//从键盘接收数据</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextInt())&#123;   <span class="comment">//判断如果输入了整数</span></span><br><span class="line">            i = scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;整数数据：&quot;</span> + i);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的不是整数数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入小数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextFloat())&#123;   <span class="comment">//判断如果输入了小数</span></span><br><span class="line">            f = scanner.nextFloat();</span><br><span class="line">            System.out.println(<span class="string">&quot;小数数据：&quot;</span> + f);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的不是小数数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Example2"><a href="#Example2" class="headerlink" title="Example2:"></a>Example2:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*输入多个数字，求其总和与平均数</span></span><br><span class="line"><span class="comment">        每输入一个数字用回车确认</span></span><br><span class="line"><span class="comment">        通过输入非数字来结束输入并输出执行结果*/</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//和</span></span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算输入了多少个数字</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数据：&quot;</span>);</span><br><span class="line">        <span class="comment">//通过循环判断是否还有输入，并在里面对每一次进行求和和统计</span></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextDouble())&#123;</span><br><span class="line">            <span class="keyword">double</span> x = scanner.nextDouble();</span><br><span class="line">            <span class="comment">//统计数字个数</span></span><br><span class="line">            m = m + <span class="number">1</span>;   <span class="comment">//m++</span></span><br><span class="line">            <span class="comment">//求和</span></span><br><span class="line">            sum = sum + x;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入了第&quot;</span> + m + <span class="string">&quot;个数据，然后当前结果是sum=&quot;</span>+sum);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m + <span class="string">&quot;个数的和为&quot;</span> + sum);</span><br><span class="line">        System.out.println(m + <span class="string">&quot;个数的平均值是&quot;</span> + (sum / m));</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java06.jpg"></p></li></ul><h1 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h1><ul><li>从上到下依次执行代码</li></ul><h1 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h1><h2 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入内容：&quot;</span>);</span><br><span class="line">    String s = scanner.nextLine();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//equals:判断字符串是否相等</span></span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">&quot;hello&quot;</span>)) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">    scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>程序中，若输入<code>hello</code>，则先输出<code>hello</code>,再输出<code>END</code>，若输入其它内容，则直接输出<code>END</code>。</li></ul><h2 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (score&gt;<span class="number">60</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if多选择结构"><a href="#if多选择结构" class="headerlink" title="if多选择结构"></a>if多选择结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式1的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式2的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式3的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果以上布尔表达式都不成立执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一个条件一定为if，最后一个条件一定为else，中间条件一定为else if</span></span><br></pre></td></tr></table></figure><h2 id="嵌套的if结构"><a href="#嵌套的if结构" class="headerlink" title="嵌套的if结构"></a>嵌套的if结构</h2><ul><li>即if选择结构中嵌套if选择结构。</li></ul><h2 id="switch多选择结构"><a href="#switch多选择结构" class="headerlink" title="switch多选择结构"></a>switch多选择结构</h2><ul><li>多选择结构还有一个实现方式就是<code>switch case</code>语句。</li><li><code>switch case</code>语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</li><li>switch语句中的变量类型可以是：<ul><li><code>byte</code>，<code>short</code>，int或者<code>char</code>。</li><li><code>从 JavaSE7 开始，switch支持字符串String类型了。</code></li><li>同时case标签必须为字符串常量或字面量。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String name = <span class="string">&quot;秦疆&quot;</span>;</span><br><span class="line"><span class="comment">//JDK7新特性，表达式结果可以是字符串！！！</span></span><br><span class="line">    <span class="keyword">switch</span> (name)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;秦疆&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;秦疆的课真不错！&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;狂神&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;狂神的课真不错！&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;弄啥嘞！&quot;</span>);</span><br><span class="line">        <span class="comment">//switch匹配一个具体的值</span></span><br><span class="line">        <span class="comment">//不加break则从case成立处开始向下依次执行所有代码，输出该处下的所有case代码</span></span><br><span class="line">        <span class="comment">//加break即case穿透，只输出case成立处代码则跳出选择结构</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字符的本质还是数字</li><li>反编译：java — class(字节码文件) — 反编译</li></ul><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输出100</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h2><ul><li>与while循环不同的是：<ul><li>对于while语句而言，如果不满足条件，则不能进入循环。do…while循环至少会执行一次。</li><li>while先判断后执行。do…while先执行后判断。</li></ul></li></ul><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul><li>for循环语句是支持迭代的一种通用结构，<code>是最有效，最灵活的循环结构</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;   <span class="comment">//初始化;条件判断;迭代</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>IDEA快捷键：<code>100.for</code>快速创建一个0到100的for循环。</p></li><li><p>死循环for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;   <span class="comment">//定义一个数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        System.out.println(numbers[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x:numbers)&#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上述代码两个for循环输出结果相同，第2个for循环为增强for循环。是将数组numbers中每个元素分别赋值给x，然后输出x，用来简化偷懒。</li></ul><h2 id="break-continue"><a href="#break-continue" class="headerlink" title="break/continue"></a>break/continue</h2><ul><li>break强行跳出循环(循环不会继续进行)。</li><li>continue跳过本次循环(循环还会继续进行)。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="article/f7ede91d.html"/>
      <url>article/f7ede91d.html</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>JDK : Java开发者工具。</li><li>JRE : Java运行环境。(JDK中包含JRE)</li><li>JVM :  Java虚拟机。</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java01.jpg"></p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul><li><p>long类型要在数字后面加个L</p><p>例如：<code>long num = 30L;</code></p></li><li><p>float类型要在数字后面加个F</p><p>例如：<code>flaot num = 50.1F;</code></p></li><li><p>字符</p><div class="note info flat"><p><code>char</code>只能输单个字符</p></div><p>例如：<code>char name = &#39;国&#39;;</code> <code>char name = &#39;A&#39;;</code></p></li><li><p>字符串</p><div class="note info flat"><p><code>String</code>不是关键字，是类</p></div><p>例如：<code>String name = &quot;蔡徐坤&quot;;</code></p></li></ul><h2 id="浮点数拓展"><a href="#浮点数拓展" class="headerlink" title="浮点数拓展"></a>浮点数拓展</h2><ul><li><p>浮点数<code>有限</code>，<code>离散</code>，<code>舍入误差</code>，<code>大约</code>，<code>接近但不等于</code></p><div class="note warning flat"><p>最好完全避免使用浮点数进行比较</p></div></li><li><p>常用BigDecimal（数学工具类）进行比较</p><p>例如：银行业务表示。</p></li></ul><h2 id="字符拓展"><a href="#字符拓展" class="headerlink" title="字符拓展"></a>字符拓展</h2><ul><li><p>所有的字符本质还是数字</p><p>使用int强制转换可以使字符转换为对应Unicode编码表原数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println((<span class="keyword">int</span>)c1);<span class="comment">//打印结果为97(十进制)</span></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">&#x27;\u0061&#x27;</span>;<span class="comment">//61为十六进制数</span></span><br><span class="line">System.out.println(c2);<span class="comment">//打印结果为a</span></span><br></pre></td></tr></table></figure></li><li><p>转义字符</p><ul><li><code>\t</code> 制表符 (相当于Tab)</li><li><code>\n</code> 换行</li><li>……</li></ul></li></ul><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">低-------------------------------------&gt;高(容量)</span><br><span class="line">byte,short,char-&gt;int-&gt;long-&gt;float-&gt;double</span><br></pre></td></tr></table></figure><ol><li><p>强制类型转换(由高转向低)</p><p><code>(类型)变量名</code></p></li><li><p>自动类型转换(由低转向高)</p></li></ol><div class="note warning flat"><p>注意点：</p><ol><li>不能对布尔值进行转换</li><li>不能把对象类型转换为不相干的类型</li><li>在把高容量转换到低容量时，强制转换</li><li>转换的时候可能存在内存溢出，或者精度问题</li></ol></div><h1 id="变量，常量，作用域"><a href="#变量，常量，作用域" class="headerlink" title="变量，常量，作用域"></a>变量，常量，作用域</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span> </span>&#123;     <span class="comment">//这是一个类</span></span><br><span class="line">    <span class="comment">//属性：变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类变量 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> salary = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例变量：从属于对象；</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  <span class="comment">//这是一个main方法</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>; <span class="comment">//局部变量；必须声明和初始化值</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;  <span class="comment">//其它方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span> </span>&#123;</span><br><span class="line">    <span class="comment">//final定义一个常量，是修饰符，不存在先后顺序；即可以与static调换位置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>IDEA快捷键<code>Ctrl+D</code>，快速复制当前行到下一行。</li></ul><h2 id="空字符串的妙用"><a href="#空字符串的妙用" class="headerlink" title="空字符串的妙用"></a>空字符串的妙用</h2><ul><li><p>字符串在前面，会对后面的量进行拼接</p></li><li><p>字符串在后面，前面的量依旧会进行运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串连接符 + , String</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b);   <span class="comment">//输出结果为1020</span></span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>);   <span class="comment">//输出结果为30</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><h2 id="Java语言支持如下运算符："><a href="#Java语言支持如下运算符：" class="headerlink" title="Java语言支持如下运算符："></a>Java语言支持如下运算符：</h2><ul><li>算数运算符：+，-，*，/，%，++，–</li><li>赋值运算符：=</li><li>关系运算符：&gt;，&lt;，&gt;=，&lt;=，==，!=instanceof</li><li>逻辑运算符：&amp;&amp;，||,!</li><li>位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;  (了解！！！)</li><li>条件运算符：? :</li><li>扩展赋值运算符：+=，-=，*=，/=</li></ul><h1 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h1><ul><li><p>包的本质：文件夹</p></li><li><p>一般利用公司<code>域名倒置</code>作为<code>包名</code></p></li><li><p>包语句的语法格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[.pkg2[.pkg3..]];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.operator</span><br></pre></td></tr></table></figure></li><li><p>导入包语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> package1[.package2...].(classname|*);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cool.ply.base.*   <span class="comment">//导入这个包下所有的类</span></span><br></pre></td></tr></table></figure></li><li><p>定义包：<code>package</code>，导入包：<code>import</code> </p></li><li><p><code>import</code>必须写在<code>package</code>下面，不然会报错</p></li></ul><h1 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h1><ul><li><p>JDK帮助文档：<a href="https://docs.oracle.com/javase/8/docs/api/">https://docs.oracle.com/javase/8/docs/api/</a></p></li><li><p>javadoc命令是用来生成自己API文档的</p></li><li><p>参数信息</p><ul><li><code>@author</code> 作者名</li><li><code>@version</code> 版本号</li><li><code>@since</code> 指明需要最早使用的jdk版本</li><li><code>@param</code> 参数名</li><li><code>@return</code> 返回值情况</li><li><code>@throws</code> 异常抛出情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.base;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Coder.Xie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Coder.Xie</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用命令行生产JavaDoc文档"><a href="#使用命令行生产JavaDoc文档" class="headerlink" title="使用命令行生产JavaDoc文档"></a>使用命令行生产JavaDoc文档</h2><ol><li><p>找到写好的Doc.java文件(我演示的文件名为：Demo01.java)</p></li><li><p>在文件路径前加cmd，即使用命令行打开此路径</p><p>在命令行中输入：<code>javadoc -encoding UTF-8 -charset UTF-8 Demo01.java</code> </p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java02.jpg" width="75%"></li><li><p>在java文件路径下会生成很多html文件，找到index.html，运行出来即可得到JavaDoc文档</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java03.jpg" width="75%"></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML表单_02</title>
      <link href="article/28806e63.html"/>
      <url>article/28806e63.html</url>
      
        <content type="html"><![CDATA[<h1 id="多行文本域"><a href="#多行文本域" class="headerlink" title="多行文本域"></a>多行文本域</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        备注信息：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form>        备注信息：<textarea name="remark" cols="30" rows="10"></textarea></form></div><div class="tip success"><p>    拖动右下角可以随意改变文本域大小，如果要取消这一特性，要使用CSS清除这一特性    textarea{    resize:none;    }    限制字符输入长度则需要使用JS脚本等方法</p></div><h1 id="readonly和disabled属性"><a href="#readonly和disabled属性" class="headerlink" title="readonly和disabled属性"></a>readonly和disabled属性</h1><h2 id="readonly属性"><a href="#readonly属性" class="headerlink" title="readonly属性"></a>readonly属性</h2><ul><li>在某些情况下，input表单控件并不用于用户输入数据，而是将已有的数据显示给用户查看，而且显示的这些数据，用户不能删除，也不能修改，即这些数据是只读的。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form>        <input type="text" name="input1" value="中国" readonly="true"><br><br>        <input type="text" name="input2" value="中国" readonly></form></div><h2 id="disabled属性"><a href="#disabled属性" class="headerlink" title="disabled属性"></a>disabled属性</h2><ul><li>在某些情况下，某些表单元素不可用，比如在用户提交表单到后台，后台正在处理表单的过程中，不允许用户再次提交表单，这时应将提交按钮设置为不可用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input4&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮2&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form>        <input type="text" name="input3" value="china" disabled="true"><br><br>        <input type="text" name="input4" value="china" disabled><br><br>        <input type="submit" value="提交按钮1">        <input type="submit" value="提交按钮2" disabled></form></div><h1 id="表单新增属性"><a href="#表单新增属性" class="headerlink" title="表单新增属性"></a>表单新增属性</h1><h2 id="form属性"><a href="#form属性" class="headerlink" title="form属性"></a>form属性</h2><ul><li>使用form属性可以定义表单元素和某个表单之间的隶属关系。form属性需赋予id值。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="formaction属性"><a href="#formaction属性" class="headerlink" title="formaction属性"></a>formaction属性</h2><ul><li>当一个表单中包含两个或两个以上的提交按钮，可使用formaction属性来指定处理逻辑。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formaction</span>=<span class="string">&quot;处理逻辑&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="autofocus属性"><a href="#autofocus属性" class="headerlink" title="autofocus属性"></a>autofocus属性</h2><ul><li><p>HTML5表单的<code>&lt;textarea&gt;</code>和所有<code>&lt;input&gt;</code>元素都有autofocus属性，其值是一个布尔值，默认值是false。一旦为某个元素设置该属性，页面加载完成后该元素将自动获得焦点。</p><div class="tip warning"><p>需要注意的是：</p><p>一个页面中最多只能有一个表单元素设置该属性，否则该功能将失效</p></div></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">autofocus</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pattern属性"><a href="#pattern属性" class="headerlink" title="pattern属性"></a>pattern属性</h2><ul><li>pattern属性是input元素的验证属性，该属性的值是一个正则表达式，通过这个表达式可以验证输入内容的有效性。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^[a-zA-Z\w&#123;2,7&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;必须以字母开头，包含字符或数字，长度是3~8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;\d&#123;6&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;必须输入6个数字&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><div class="gallery ">    <p>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/html1.jpg">    </div><br>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/html2.jpg">    </div>    </p></div></div><h2 id="placeholder属性"><a href="#placeholder属性" class="headerlink" title="placeholder属性"></a>placeholder属性</h2><ul><li>placeholder属性主要用于在文本框或文本域中提供输入提示信息，以增加用户界面的友好性。当表单元素获得焦点时，显示在文本框或文本域中的提示信息将自动消失。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的真实姓名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        电话：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的手机号码&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        备注：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入内容不能超过150个字符&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="" method="POST">        姓名：<input type="text" placeholder="请输入您的真实姓名" name="username"><br>        电话：<input type="text" placeholder="请输入您的手机号码" name="tel"><br>        备注：<textarea placeholder="输入内容不能超过150个字符" cols="30" rows="10"></textarea><br>        <input type="submit" value="提交"></form></div><h2 id="required属性"><a href="#required属性" class="headerlink" title="required属性"></a>required属性</h2><ul><li>判断元素的值是否为空或字符长度是否等于0。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">required</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="元素轮廓-outline"><a href="#元素轮廓-outline" class="headerlink" title="元素轮廓(outline)"></a>元素轮廓(outline)</h1><ul><li><p>修改轮廓的默认样式需要使用CSS的outline属性</p><table><thead><tr><th align="center">属性</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">outline</td><td align="center">在一个声明中同时设置各个属性，<br />各属性之间空一格：outline-color outline-style outline-width</td></tr><tr><td align="center">outline-color</td><td align="center">取值与border-color类似</td></tr><tr><td align="center">outline-style</td><td align="center">取值与border-style类似</td></tr><tr><td align="center">outline-width</td><td align="center">取值与border-width类似</td></tr></tbody></table></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">            <span class="attribute">outline</span>: red dotted thin;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="表单元素的默认样式及重置"><a href="#表单元素的默认样式及重置" class="headerlink" title="表单元素的默认样式及重置"></a>表单元素的默认样式及重置</h1><ul><li><table><thead><tr><th align="center">元素</th><th align="center">样式重置</th></tr></thead><tbody><tr><td align="center">form</td><td align="center">form{<br />margin:0;<br />}</td></tr><tr><td align="center">input表单控件</td><td align="center">input[type=text]{<br />border:none或其他值;<br />padding:0或某个px;<br />outline:none;<br />}<br />input[type=radio]{<br />outline:none;<br />margin:0或某个px;<br />}<br />input[type=checkbox]{<br />outline:none;<br />margin:0或某个px;<br />}</td></tr><tr><td align="center">textarea</td><td align="center">textarea{<br />margin:0;<br />padding:某个px;<br />outline:none;<br />resize:none;<br />overflow:auto;<br />}</td></tr><tr><td align="center">select</td><td align="center">select{<br />padding:0;<br />}</td></tr><tr><td align="center">option</td><td align="center">option{<br />left-padding:某个px;<br />right-padding:某个px;<br />}</td></tr></tbody></table></li></ul><h1 id="表单美化"><a href="#表单美化" class="headerlink" title="表单美化"></a>表单美化</h1><ul><li>与普通元素一样通过CSS控制美化，此处略过N个字。</li></ul><h1 id="表单的元素类型"><a href="#表单的元素类型" class="headerlink" title="表单的元素类型"></a>表单的元素类型</h1><ul><li><p>form是块级元素</p><p>display属性值为block</p></li><li><p>input,select,textarea和button元素是行内块元素</p><p>display属性值为inline-block</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 表单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML表单_01</title>
      <link href="article/b1893fd9.html"/>
      <url>article/b1893fd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="input表单控件"><a href="#input表单控件" class="headerlink" title="input表单控件"></a>input表单控件</h1><h2 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        电话：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        邮编：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PC&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        主页：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;http://&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form name="form1" action="register.jsp" method="POST">        姓名：<input type="text" name="username"><br>        电话：<input type="text" name="tel" size="20"><br>        邮编：<input type="text" name="PC" maxlength="6"><br>        主页：<input type="text" name="url" value="http://"></form></div><h2 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a>密码框</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user_name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;psw&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            姓名：<input type="text" name="user_name"><br>            密码：<input type="password" name="psw"></form></div><h2 id="隐藏域"><a href="#隐藏域" class="headerlink" title="隐藏域"></a>隐藏域</h2><ul><li>隐藏域不会被浏览者看到，它是给开发人员用于在不同页面传递域中所设定的值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;域名称&quot;</span> <span class="attr">value</span>=<span class="string">&quot;域值&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件域"><a href="#文件域" class="headerlink" title="文件域"></a>文件域</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;域名称&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            <input type="file" name="域名称"></form></div><h2 id="单选框与复选框"><a href="#单选框与复选框" class="headerlink" title="单选框与复选框"></a>单选框与复选框</h2><ol><li>单选框</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;域名称&quot;</span> <span class="attr">value</span>=<span class="string">&quot;域值&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;域名称&quot;</span> <span class="attr">value</span>=<span class="string">&quot;域值&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">              <input type="radio" name="域名称" value="域值" checked="checked"></form><form action="register.jsp" method="POST">            <input type="radio" name="域名称" value="域值"></form></div><ol start="2"><li>多选框</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            性别:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>女</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            爱好：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span> <span class="attr">name</span>=<span class="string">&quot;m1&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>音乐</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;trip&quot;</span> <span class="attr">name</span>=<span class="string">&quot;m2&quot;</span>&gt;</span>旅游</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;reading&quot;</span> <span class="attr">name</span>=<span class="string">&quot;m3&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>阅读</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            性别:            <input type="radio" value="female" name="gender">女            <input type="radio" value="male" name="gender">男<br>            爱好：            <input type="checkbox" value="music" name="m1" checked="checked">音乐            <input type="checkbox" value="trip" name="m2">旅游            <input type="checkbox" value="reading" name="m3" checked="checked">阅读</form></div><h2 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            请输入用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;按钮名称&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            请输入用户名：<input type="text" name="username">            <input type="submit" name="按钮名称" value="登录"></form></div><h2 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮显示文本&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;javascript函数名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;按钮名称&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            <input type="button" value="按钮显示文本" onclick="javascript函数名" name="按钮名称"></form></div><h2 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            请输入用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            请输入用户名：<input type="text" name="username">            <input type="reset" value="取消"></form></div><h2 id="图像按钮"><a href="#图像按钮" class="headerlink" title="图像按钮"></a>图像按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">name</span>=<span class="string">&quot;名称&quot;</span> <span class="attr">src</span>=<span class="string">&quot;图像路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替换信息&quot;</span> <span class="attr">width</span>=<span class="string">&quot;宽度值&quot;</span> <span class="attr">height</span>=<span class="string">&quot;高度值&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="button元素按钮"><a href="#button元素按钮" class="headerlink" title="button元素按钮"></a>button元素按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h1><ul><li>单击这个标签（文本）可以使光标聚焦在input元素上</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>女</span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>男</span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="">            <input type="radio" value="female" name="gender">女            <label>            <input type="radio" value="male" name="gender">男            </label></form></div><h1 id="选择列表"><a href="#选择列表" class="headerlink" title="选择列表"></a>选择列表</h1><h2 id="多项选择列表"><a href="#多项选择列表" class="headerlink" title="多项选择列表"></a>多项选择列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        请选择您最喜欢吃的水果：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span> <span class="attr">selected</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;apple&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;pear&quot;</span> <span class="attr">selected</span> = <span class="string">&quot;selected&quot;</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;grape&quot;</span> <span class="attr">selected</span> = <span class="string">&quot;selected&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;watermelon&quot;</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;peach&quot;</span>&gt;</span>桃子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form>        请选择您最喜欢吃的水果：<select name="fruit" size="5" multiple>            <option value="banana" selected>香蕉</option>            <option value="apple">苹果</option>            <option value="pear" selected = "selected">梨子</option>            <option value="grape" selected = "selected">葡萄</option>            <option value="watermelon">西瓜</option>            <option value="peach">桃子</option>        </select></form></div><h2 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        请选择您的学历：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;degree&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>博士后<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">selected</span> = <span class="string">&quot;selected&quot;</span>&gt;</span>博士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>硕士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>学士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>其它<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form>        请选择您的学历：<select name="degree">            <option value="1">博士后</option>            <option value="2" selected = "selected">博士</option>            <option value="3">硕士</option>            <option value="4">学士</option>            <option value="0">其它</option>        </select></form></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 表单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript对象与函数_01</title>
      <link href="article/9b9ababb.html"/>
      <url>article/9b9ababb.html</url>
      
        <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li>对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性（与C语言中结构体类似）</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li><p>内建对象</p><ul><li>由ES标准中定义的对象，在任何的ES的实现中都可以使用</li><li>比如：Math,String,Number,Boolean,Function,Object……</li></ul></li><li><p>宿主对象</p><ul><li>由JS的运行环境提供的对象，目前来讲主要是浏览器提供的对象</li><li>比如BOM,DOM</li></ul></li><li><p>自定义对象</p><ul><li>由开发人员自己创建的对象</li></ul></li></ol><h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><h3 id="向对象中添加-修改属性"><a href="#向对象中添加-修改属性" class="headerlink" title="向对象中添加/修改属性"></a>向对象中添加/修改属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj.name = <span class="string">&quot;孙悟空“;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">obj.gender = ”男“;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">obj.age = 18;</span></span><br></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.gender);</span><br></pre></td></tr></table></figure><h3 id="特殊属性名的存取"><a href="#特殊属性名的存取" class="headerlink" title="特殊属性名的存取"></a>特殊属性名的存取</h3><p><strong>这种写法更加灵活</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="string">&quot;123&quot;</span>] = <span class="number">789</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">&quot;123&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h3><ul><li><p>检查obj中是否含有test2属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;test2&quot;</span> <span class="keyword">in</span> obj);</span><br></pre></td></tr></table></figure></li></ul><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><ul><li><p>JS中变量都是保存在栈内存中的</p><ul><li>基本数据类型的值直接在栈内存中存储</li></ul></li><li><p>对象是保存在堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间</p><p>而变量保存的是对象的内存地址（对象的引用）</p></li></ul><h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;  等同于 <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><ul><li><p>更方便地直接添加属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">age:<span class="number">28</span>,</span><br><span class="line">gender:<span class="string">&quot;男&quot;</span>(此处最好不要写<span class="string">&quot;,&quot;</span>，浏览器会默认删除<span class="string">&quot;,&quot;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更方便地无限套娃</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">age:<span class="number">28</span>,</span><br><span class="line">gender:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">test:&#123;<span class="attr">name</span>:<span class="string">&quot;沙和尚&quot;</span>&#125;(注意是<span class="string">&quot;:&quot;</span>,而不是<span class="string">&quot;=&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li><code>函数也是一个对象</code></li><li>函数可以封装一些功能（代码），在需要时可以执行这些功能（代码）</li></ul><h2 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h2><ul><li><p>创建一个函数对象(不常用)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;console.log(&#x27;Hello 这是我的第一个函数&#x27;);&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>函数的调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun();</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用函数声明来创建一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;这是我的第二个函数~~~&quot;</span>);</span><br><span class="line">alert(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;~~~(&gt;_&lt;)~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun2();</span><br></pre></td></tr></table></figure></li><li><p>使用函数表达式来创建一个对象</p><p>本质：将匿名函数赋值给变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;我是匿名函数中封装的代码&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun3();</span><br></pre></td></tr></table></figure></li><li><p>函数的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><code>如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined</code></p></li><li><p>返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> d = a + b + c;</span><br><span class="line"><span class="keyword">return</span> d;(rueturn后的语句不会执行)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = sum(<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure></li><li><p>实参可以是任意数据类型，包括对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我是&quot;</span>+o.name+<span class="string">&quot;，今年我&quot;</span>+o.age+<span class="string">&quot;岁了，&quot;</span>+<span class="string">&quot;我是一个&quot;</span>+o.gender+<span class="string">&quot;人，&quot;</span>+<span class="string">&quot;我住在&quot;</span>+o.address)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">  age:<span class="number">18</span>,</span><br><span class="line">  gender:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">  address:<span class="string">&quot;花果山&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  sayHello(obj);</span><br><span class="line">  <span class="comment">//sayHello(obj);也可以这样写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">      a(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  fun(sayHello);</span><br><span class="line">  <span class="comment">//输出结果都是：</span></span><br><span class="line">  <span class="comment">//我是孙悟空，今年我18岁了，我是一个男人,我住在花果山</span></span><br></pre></td></tr></table></figure></li><li><p>实参可以是一个对象，也可以是一个函数，对象能干的事，实参都能干</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;hello&quot;</span>)&#125;);</span><br><span class="line"><span class="comment">//输出结果为：</span></span><br><span class="line"><span class="comment">//a = function()&#123;alert(&quot;hello&quot;)&#125;</span></span><br></pre></td></tr></table></figure><ul><li>Demo1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = a + b + c;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">fun(sum);</span><br></pre></td></tr></table></figure><ul><li><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201204194957573.png" alt="image-20201204194957573"></p></li><li><p>Demo2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = a + b + c;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">fun(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure></li><li><p>输出结果为：</p><center>a = 6</center></li><li><p>对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum()</span><br><span class="line">    - 调用函数</span><br><span class="line">    - 相当于使用函数的返回值</span><br><span class="line">sum</span><br><span class="line">    - 函数对象</span><br><span class="line">    - 相当于直接使用函数</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="返回值的类型"><a href="#返回值的类型" class="headerlink" title="返回值的类型"></a>返回值的类型</h2><ul><li><p>Demo1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;函数要执行了~~~&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//使用break可以退出当前循环 </span></span><br><span class="line">            <span class="comment">//continue用于跳出当次循环</span></span><br><span class="line">            <span class="comment">//使用return可以结束整个函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    alert(<span class="string">&quot;函数执行完了~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure></li><li><p>返回值可以是任意的数据类型</p><p>也可以是一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//    return 10;</span></span><br><span class="line">    <span class="comment">//    return &quot;hello&quot;;</span></span><br><span class="line">    <span class="comment">//    return true;</span></span><br><span class="line">    <span class="comment">//    return null;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fun2();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;沙和尚&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = fun3();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span>+b.name);<span class="comment">//b = 沙和尚</span></span><br></pre></td></tr></table></figure><p>也可以是一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;我是fun5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将fun5函数对象作为返回值返回</span></span><br><span class="line">    <span class="keyword">return</span> fun5;</span><br><span class="line">&#125;</span><br><span class="line">a = fun4;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201204214934814.png" alt="image-20201204214934814"></p><p>上述程序若将<code>a=fun4;</code>改为<code>a=fun4();</code>，<code>console.log(a);</code>改为<code>a();</code>或者<code>fun4()();</code> 都将弹出警告框！</p></li></ul><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><ul><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数对象()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *立即执行函数</span></span><br><span class="line"><span class="comment"> *函数定义完，立即被调用，这种函数叫做立即执行函数</span></span><br><span class="line"><span class="comment"> *立即执行函数往往只会执行一次</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span>+b);</span><br><span class="line">&#125;)(<span class="number">123</span>,<span class="number">456</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><center>a = 123</center><center>b = 456</center></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><p>函数也可以成为对象的属性</p></li><li><p>如果一个函数作为一个对象的属性保存，那么我们就称这个函数是这个对象的方法。调用这个函数就说是调用对象的方法</p></li><li><p>但是它只是名称上的区别，与函数并无差异</p></li><li><p>一个形象的比喻：函数是公交车🚌，方法是私家车🚗</p></li><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">//向对象中添加属性</span></span><br><span class="line">obj.name = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line"><span class="comment">//对象的属性值可以是任何数据类型，也可以是个函数</span></span><br><span class="line">obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name:<span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    sayName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj2.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.sayName();</span><br><span class="line">obj2.sayName();</span><br></pre></td></tr></table></figure><p>输出结果为：</p><center>孙悟空</center><center>猪八戒</center></li></ul><h2 id="枚举对象中的属性"><a href="#枚举对象中的属性" class="headerlink" title="枚举对象中的属性"></a>枚举对象中的属性</h2><ul><li><p>使用<code>for ... in</code> 语句</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> 变量 <span class="keyword">in</span> 对象) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象中有几个属性，循环体就会执行几次</p><p>每次执行时会将对象中的一个属性的名字赋值给变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line">    name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    address:<span class="string">&quot;花果山&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://blog.ply.cool/image/image-20201204224529660.png" alt="image-20201204224529660"></p></li><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line">    name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    address:<span class="string">&quot;花果山&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;属性名：&quot;</span>+n);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;属性值：&quot;</span>+obj[n]);<span class="comment">//.n和[&quot;n&quot;]只能用于取静态值，取变量要用[n]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://blog.ply.cool/image/image-20201204225116678.png" alt="image-20201204225116678"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基本数据类型</title>
      <link href="article/a9ba4134.html"/>
      <url>article/a9ba4134.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h1><p>一个完整的JavaScript实现应该由下列三个不同的部分组成：</p><ol><li><p>核心（ECMAScript）</p></li><li><p>文档对象模型（DOM） </p></li><li><p>浏览器对象模型（BOM）</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/js1.jpg"></p></li></ol><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h3><p>变量名 test 和变量名 Test 分别表示两个不同的变量，而函数名不能使用 typeof，因为它是一个关键字，但 typeOf 则完全可以是一个有效的函数名。</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>所谓标识符，就是指变量、函数、属性的名字，或者函数的参数。</p><p>标识符可以是按照下列格式规则组合起来的一或多个字符：</p><ul><li><p>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）</p></li><li><p>其他字符可以是字母、下划线、美元符号或数字</p></li><li><p>不能把关键字、保留字、<strong>true</strong>、<strong>false</strong> 和 <strong>null</strong> 用作标识符</p></li></ul><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><p>以下就是 ECMAScript的全部关键字(具有特定用途)：</p><p>break do instanceof typeof case else new var catch finally return void continue for switch while debugger* function this with default if throw delete in try </p><p>第 5 版在非严格模式全部保留字(不能用作标识符)：</p><p>class enum extends super const export import </p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>定义变量时要使用 var 操作符（注意 var 是一个关键字），后跟变量名（即一个标识符），如：var message; <code>如果在函数中使用 var 定义一个变量，那么这个变量在函数退出后就会被销毁。</code>可以使用一条语句定义多个变量，把每个变量（初始化或不初始化均可）用<code>逗号</code>分隔开即可。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>基本数据类型：Undefined、Null、Boolean、Number和 String。</p><p>还有 1种复杂数据类型——Object(本质上是由一组无序的名值对组成的)。</p><h3 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a>typeof操作符</h3><p>对一个值使用 typeof (<code>检测给定变量的数据类型</code>)操作符可能返回下列某个字符串：</p><ul><li>undefined”——如果这个值未定义；</li><li>“boolean”——如果这个值是布尔值；</li><li>“string”——如果这个值是字符串；</li><li>“number”——如果这个值是数值；</li><li>“object”——如果这个值是对象或 null；</li><li>“function”——如果这个值是函数。</li></ul><h3 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a><strong>Undefined</strong>类型</h3><p>在使用 var 声明变量但未对其加以初始化时，这个变量的值就是 undefined。</p><h3 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a><strong>Null</strong>类型</h3><p>从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用 typeof 操作符检测 null 值时会返回”object”的原因。如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为 null 而不是其他值。</p><h3 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a><strong>Boolean</strong>类型</h3><p>该类型只有两个字面值：true 和 false。这两个值与数字值不是一回事，因此 true 不一定等于 1，而 false 也不一定等于 0。</p><div class="tip warning"><p>需要注意的是，Boolean 类型的字面值 true 和 false 是区分大小写的。也就是说，True 和 False（以及其他的混合大小写形式）都不是 Boolean 值，只是标识符</p><p></p></div><p>虽然 Boolean 类型的字面值只有两个，但 ECMAScript 中所有类型的值都有与这两个 Boolean 值等价的值。要将一个值转换为其对应的 Boolean 值，可以调用转型函数 Boolean()。</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/js2.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/js3.jpg"></p><h3 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a><strong>Number</strong>类型</h3><ol><li><p>浮点数值(该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字)</p></li><li><p>数值范围(要想确定一个数值是不是有穷的，可以使用 isFinite()函数。这个函数在参数位于最小与最大数值之间时会返回 true)</p></li><li><p>NaN(即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不会抛出错误了）)</p></li><li><p>数值转换(有 3 个函数可以把非数值转换为数值：Number()、parseInt()和 parseFloat()。第一个函数，即转型函数 Number()可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值)</p></li></ol><h1 id="toString与String的区别"><a href="#toString与String的区别" class="headerlink" title="toString与String的区别"></a>toString与String的区别</h1><ol><li>toString()方法；数值、字符串、对象、布尔；都有toString方法；这个方法唯一能做的就是返回相应的字符串；其中null和undefined没有toString()方法。</li><li>String()属于强制转换， null转换的结果为null；undefined转换的结果为undefined；其余的如果有toString()方法，即调用该方法，返回相应的结果；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王者荣耀战区修改教程</title>
      <link href="article/22585c50.html"/>
      <url>article/22585c50.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>王者荣耀作为一款近年来十分火爆的游戏，深受各年龄段人群的喜爱。很多玩家更是期望能够提高自己主玩英雄的荣耀战力排名，但由于当地某个英雄的荣耀战力榜的分值已经被刷的很高，想要跻身前列，得到一个银牌牌或者金牌牌实在困难，不少玩家便有了更换荣耀战区的想法。本篇文章就王者荣耀更换战区这个问题提供了安卓区和苹果区两套不同的解决方案，亲测有效，希望对小伙伴们有所帮助。</p></li><li><p>本次教程分安卓区和苹果区两个平台，请根据要修改的平台阅读相关内容。</p></li><li><p>首先，这里先声明一个错误的修改方案：</p><div class="tip warning"><p>利用分身多开类软件修改，将会造成账号限时或永久封停的后果</p><p></p></div></li></ul><div class="note success flat"><p>特别强调：王者荣耀战区一周只能修改一次，且只能在<code>每周一</code>修改</p></div><h1 id="安卓区修改教程"><a href="#安卓区修改教程" class="headerlink" title="安卓区修改教程"></a>安卓区修改教程</h1><div class="note primary no-icon flat"><p>所需工具：PC端QQ游戏平台</p></div><ol><li><p>电脑下载QQ游戏平台，下载完成后，在QQ游戏平台中搜索下载王者荣耀手游（同时会自动下载手游模拟器）</p></li><li><p>下载完成后，进入王者荣耀，直接点击右侧<code>虚拟定位</code>，然后用鼠标找到想要更换的战区地点（这里我以内蒙古呼和浩特为例）</p><div class="gallery ">    <p>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王1.png">    </div><br>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王2.png">    </div>    </p></div></li><li><p>虚拟位置更改完成后直接进入游戏，打开你的荣耀战区，更新一下新的战区</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王3.png" width="75%"></li></ol><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王4.png" width="70%"><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王5.png" width="70%"><p>若进入游戏后无法点开荣耀战区，则需要点击此处：</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王7.png" width="70%"><p>如果问题依然不能解决，重新登陆即可。</p><h1 id="苹果区修改教程"><a href="#苹果区修改教程" class="headerlink" title="苹果区修改教程"></a>苹果区修改教程</h1><div class="note primary no-icon flat"><p>所需工具：PC端爱思助手，数据线连接苹果手机</p></div><ol><li><p>打开爱思助手–工具箱–打开虚拟定位</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王9.png" width="70%"></li><li><p>找到自己需要定位的战区，点击修改虚拟定位</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王10.png" width="70%"><p>此时手机已经暂时处于虚拟定位的状态，只需进入游戏重新定位即可定位想要定位的战区。</p><p>但是，由于手机系统的虚拟定位时间有限，所以请修改完虚拟定位后尽快进游戏更新战区，以免过期无效。</p></li></ol><p><strong><em>以上所提到的方法可保证玩家在一周内锁定在自己想要的战区，如果发现战区又锁定到了实地位置，重新操作即可！！！</em></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> 我收藏的tags/note样式（个人使用）</title>
      <link href="article/7945418e.html"/>
      <url>article/7945418e.html</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客常用tags-note模板"><a href="#个人博客常用tags-note模板" class="headerlink" title="个人博客常用tags/note模板"></a>个人博客常用tags/note模板</h1><p><font size=4><strong>本篇文章涉及内容来自<a href="https://www.antmoe.com/" target="_blank" rel="noopener external nofollow noreferrer"> 小康博客</a>，<a href="https://demo.jerryc.me/" target="_blank" rel="noopener external nofollow noreferrer"> Butterfly主题安装文档（作者：jerry）</a></strong></font></p><div class="tip warning"><p>以下主要是我对以上两位大佬所写内容的摘要，主要服务于我今后的博文创作</p><p></p></div><p><strong>若您希望可以使用这些效果，请详细阅读以上两位大佬的博客，因为涉及到主题（或版本）不同，若没有增加或引入正确的CSS/JS文件，直接写入下列代码将不能获得对应效果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D; &quot;checkbox red checked&quot; &gt; &lt;input type&#x3D; &quot;radio&quot; checked&#x3D;&quot;checked&quot;&gt;实心红色圆圈&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;checkbox minus blue checked&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot;&gt;方块蓝色减号&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;checkbox green checked&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot;&gt;方块绿色对号&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;checkbox green checked&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; &gt;方块空心对号（绿色方框）&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;checkbox times red checked&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot;&gt;方块红色错误&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><div class= "checkbox red checked" > <input type= "radio" checked="checked">实心红色圆圈</div><div class="checkbox minus blue checked"><input type="checkbox" checked="checked">方块蓝色减号</div><div class="checkbox green checked"><input type="checkbox" checked="checked">方块绿色对号</div><div class="checkbox green checked"><input type="checkbox" >方块空心对号（绿色方框）</div><div class="checkbox times red checked"><input type="checkbox" checked="checked">方块红色错误</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 小tag标签语法示例 *&#x2F;</span><br><span class="line">&lt;span class&#x3D;&quot;inline-tag red&quot;&gt;红色小标签&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;inline-tag green&quot;&gt;绿色小标签&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;inline-tag blue&quot;&gt;蓝色小标签&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;inline-tag yellow&quot;&gt;黄色小标签&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;inline-tag grey&quot;&gt;灰色小标签&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><p><span class="inline-tag red">红色小标签</span><br><span class="inline-tag green">绿色小标签</span><br><span class="inline-tag blue">蓝色小标签</span><br><span class="inline-tag yellow">黄色小标签</span><br><span class="inline-tag grey">灰色小标签</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tip error&quot;&gt;&lt;p&gt;错误标签&lt;&#x2F;p&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;tip warning&quot;&gt;&lt;p&gt;警告标签&lt;&#x2F;p&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;tip success&quot;&gt;&lt;p&gt;成功标签&lt;&#x2F;p&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;tip info&quot;&gt;&lt;p&gt;信息标签&lt;&#x2F;p&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><div class="tip error"><p>错误标签</p><p></p></div><div class="tip warning"><p>警告标签</p><p></p></div><div class="tip success"><p>成功标签</p><p></p></div><div class="tip info"><p>信息标签</p><p></p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* note语法示例(边框加粗版)*&#x2F;</span><br><span class="line">&lt;p class&#x3D;&#39;div-border green left right&#39;&gt;绿色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&#39;div-border red left right&#39;&gt;红色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&#39;div-border yellow left right&#39;&gt;黄色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&#39;div-border grey left right&#39;&gt;灰色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&#39;div-border blue left right&#39;&gt;蓝色&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><p class='div-border green left right'>绿色</p><p class='div-border red left right'>红色</p><p class='div-border yellow left right'>黄色</p><p class='div-border grey left right'>灰色</p><p class='div-border blue left right'>蓝色</p><p><strong>去掉<code>left right</code>可得基本边框版，效果如下：</strong></p><p class='div-border green'>绿色</p><p class='div-border red'>红色</p><p class='div-border yellow'>黄色</p><p class='div-border grey'>灰色</p><p class='div-border blue'>蓝色</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 无icon提示块标签</p></div><p><font size=6><strong>特别声明：</strong></font></p><p><font size=5><strong>本篇文章涉及内容来自<a href="https://www.antmoe.com/" target="_blank" rel="noopener external nofollow noreferrer"> 小康博客</a>，<a href="https://demo.jerryc.me/" target="_blank" rel="noopener external nofollow noreferrer"> Butterfly主题安装文档（作者：jerry）</a></strong></font></p>]]></content>
      
      
      
        <tags>
            
            <tag> 个人工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="article/79666db.html"/>
      <url>article/79666db.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章  绪论"></a>第一章  绪论</h1><p>数据的定义：信息的载体。</p><p>数据元素、数据项：<strong>数据元素</strong>是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干<strong>数据项</strong>组成，数据项是构成数据元素的不可分割的最小单位。</p><p>数据结构的定义：相互之间存在一种或多种特定<strong>关系</strong>的数据元素的集合。</p><p>数据对象：具有<strong>相同性质</strong>的数据元素的集合，是数据的一个子集。</p><h2 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a>数据结构的三要素</h2><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><ol><li>集合&lt;不讨论&gt;</li><li>线性结构&lt;第二，三章&gt;</li><li>树形结构&lt;第四章&gt;</li><li>图状结构（网状结构）&lt;第五章&gt;</li></ol><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ol><li>顺序存储</li><li>链式存储</li><li>索引存储</li><li>散列存储&lt;第六章（散列表有讲）&gt;</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/d7.png"></p><h3 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a>数据的运算</h3><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/d8.png"></p><h2 id="数据类型、抽象数据类型"><a href="#数据类型、抽象数据类型" class="headerlink" title="数据类型、抽象数据类型"></a>数据类型、抽象数据类型</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>定义：一个值的集合和定义在此集合上的一组操作的总称。</p><ol><li><p>原子类型（其值不可再分的数据类型）</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/d9.png"></p></li><li><p>结构类型（其值可以再分解为若干成分&lt;分量&gt;的数据类型）</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/d10.png"></p></li></ol><h3 id="抽象数据类型（ADT）"><a href="#抽象数据类型（ADT）" class="headerlink" title="抽象数据类型（ADT）"></a>抽象数据类型（ADT）</h3><p>定义：抽象数据组织及与之相关的操作。</p><h2 id="算法的基本概念"><a href="#算法的基本概念" class="headerlink" title="算法的基本概念"></a>算法的基本概念</h2><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/d12.png"></p><p><strong>算法的五大特性</strong></p><ol><li><p><strong>有穷性</strong>：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。</p><p>注：<strong>算法</strong>必须是<strong>有穷</strong>的，而<strong>程序</strong>可以是<strong>无穷</strong>的。</p></li><li><p><strong>确定性</strong>：算法中每条指令必须有确切的含义，对于<strong>相同的输入</strong>只能得出<strong>相同的结果</strong>。</p></li><li><p><strong>可行性</strong>：算法中描述的操作都可以通过已经实现的<strong>基本运算执行有限次</strong>来实现。</p></li><li><p><strong>输入</strong>：一个算法<strong>有零个或多个输入</strong>，这些输入取自于某个特定的对象的集合。</p></li><li><p><strong>输出</strong>：一个算法<strong>有一个或多个输出</strong>，这些输出是与输入有着某种特定关系的量。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> VS Code配置C/C++环境</title>
      <link href="article/1802445c.html"/>
      <url>article/1802445c.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        因本人也是第一次入手VS Code，这里提供的配置方法仅供参考。若您有更好的方法或建议，还请在下方留言评论，我将根据大家的建议修改教程内容。尽量做到对还未入手的萌新提供一定的参考价值。❗❗❗本教程仅适用于Windows系统。</p><h1 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol><li><p>Visual Studio Code官网下载请点击<a href="https://code.visualstudio.com" target="_blank" rel="noopener external nofollow noreferrer">这里</a>。</p></li><li><p>C++工具链（mingw64），可在官网下载，但由于是外国网站，大陆下载会很慢。</p><p><a href="https://pan.baidu.com/s/1_gdaid7yvGTqN2xikoEUmQ" target="_blank" rel="noopener external nofollow noreferrer">这里</a>提供一个快速下载链接，提取码为：ne84。（感谢 bilibili<a href="https://www.bilibili.com/video/BV1sW411v7VZ/?spm_id_from=333.788.videocard.0" target="_blank" rel="noopener external nofollow noreferrer">鹅弹</a>提供下载链接）</p><p>当然，你也可以选择<a href="https://sourceforge.net/projects/mingw-w64/" target="_blank" rel="noopener external nofollow noreferrer">官方下载</a>渠道。</p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>VS Code安装时注意将以下选项全部勾选：</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/7.jpg" style="zoom: 67%;" /></li><li><p>mingw64下载完成之后，需要将其解压。（建议将其解压在C盘根目录下，并且保证文件路径无中文或空格）</p></li></ol><h1 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h1><ol><li><p>进入解压好的mingw64文件中，复制文件夹\bin的路径。</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/8.jpg" style="zoom: 33%;" /></li><li><p>右键点击此电脑–属性–高级系统设置–环境变量–找到系统变量–双击其中的Path–新建–粘贴刚刚复制的\bin文件夹路径即可。</p><div class="note success flat"><p><strong>温馨提示</strong>：环境变量中的数据最好不要随意删除，否则可能导致Windows系统无法正常运行等严重问题。</p></div></li></ol><h1 id="VS-Code运行及插件安装"><a href="#VS-Code运行及插件安装" class="headerlink" title="VS Code运行及插件安装"></a>VS Code运行及插件安装</h1><h2 id="VS-Code运行"><a href="#VS-Code运行" class="headerlink" title="VS Code运行"></a>VS Code运行</h2><p>新建一个文件夹，用来存放C/C++代码，注意该文件夹的路径中不能有中文或者空格。（因为可能导致gdb没有办法正常工作，没有办法Debug）对文件夹右键–通过Code打开。</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>如图，搜索并安装这两个插件（一个是官方的C++插件，另一个是软件的汉化包）</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/9.jpg"></p><h2 id="创建测试文件"><a href="#创建测试文件" class="headerlink" title="创建测试文件"></a>创建测试文件</h2><p>点击左侧任务栏第一个（资源管理器），在刚才建立的用于存放代码的文件夹下新建文件（注意后缀为.cpp）。然后敲入一个简单的程序，这里提供我的测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;conio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc,char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Hello VSCode&quot; &lt;&lt; std::endl;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置VS-Code的文件"><a href="#配置VS-Code的文件" class="headerlink" title="配置VS Code的文件"></a>配置VS Code的文件</h2><p>点击左侧任务栏第四个（运行），点击创建launch.json文件，会在上方弹出选择环境，点击C++(GDB/LLDB)–g++，launch.json文件就会自动配置成功。然后Ctrl+Shift+p打开命令面板，输入并点击Tasks:Configure Tsak(任务：配置任务)–然后点击g++.exe，系统会自动创建一个tasks.json文件，建议在该文件中添加如下项（意为按照C++17的标准，当然后续会更新迭代）：</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/10.jpg" style="zoom: 50%;" /><p>接下来要做两步<strong>很关键的操作</strong>，在launch.json和tasks.json文件中修改mingw64中文件的路径，操作如图：</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/13.jpg" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/14.jpg" style="zoom:50%;" /><p><strong>这里分享我的两个.json文件：</strong></p><p><strong>🚩launch.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    &#x2F;&#x2F; 悬停以查看现有属性的描述。</span><br><span class="line">    &#x2F;&#x2F; 欲了解更多信息，请访问: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;g++.exe - 生成和调试活动文件&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: true,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;C:\\mingw64\\x86_64-8.1.0-release-posix-seh-rt_v6-rev0\\mingw64\\bin\\gdb.exe&quot;,</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;g++.exe build active file&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🚩tasks.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; See https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkId&#x3D;733558</span><br><span class="line">    &#x2F;&#x2F; for the documentation about the tasks.json format</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;g++.exe build active file&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;g++&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span><br><span class="line">                &quot;-std&#x3D;c++17&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;options&quot;: &#123;</span><br><span class="line">                &quot;cwd&quot;:&quot;C:\\mingw64\\x86_64-8.1.0-release-posix-seh-rt_v6-rev0\\mingw64\\bin&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;problemMatcher&quot;:[</span><br><span class="line">                &quot;$gcc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &quot;build&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行刚刚创建的-cpp文件"><a href="#执行刚刚创建的-cpp文件" class="headerlink" title="执行刚刚创建的.cpp文件"></a>执行刚刚创建的.cpp文件</h2><p>回到该文件页面，按下快捷键F5（运行），输出“Hello VSCode”即成功！</p><p>若程序无法正常运行，请尝试将两个.json文件换成我的.json文件，但<strong>注意更改你的路径</strong>。</p><h1 id="我遇到的坑"><a href="#我遇到的坑" class="headerlink" title="我遇到的坑"></a>我遇到的坑</h1><p>这里分享一个我遇到的坑：</p><p>我当时在配置完成之后，按下F5，会弹出两个窗口👀，一个是Windows Powershell,另一个是正常的显示窗口。当时我寻找解决方法，发现<strong>出现这种情况的人并不多</strong>，我花了大量时间，心态都搞崩了💢…好在后来问题解决了。这里提供一个解决思路：因为我经常用Windows的命令提示符，可能导致因为某些原因，命令提示符的相关设置出了问题。我是这样解决的：打开命令提示符，右键点击窗口–属性，将使用旧版控制台选项取消。但是这个操作将导致命令提示符无法正常使用（只有一个黑框，不能输入任何字符），但是这对不使用命令提示符的人来说，无疑是一种解决方法。若您有更好的解决方法，欢迎评论区留言。</p><div class="gallery ">    <p>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/11.jpg" width="75%">    </div><br>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/12.jpg" width="75%">    </div>    </p></div><p><strong>创作不易，感谢支持🤞🤞🤞</strong></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现QQ消息轰炸</title>
      <link href="article/8a4b34f1.html"/>
      <url>article/8a4b34f1.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-环境"><a href="#C-环境" class="headerlink" title="C++环境"></a>C++环境</h1><p>我们需要一个C++编辑器（已配置C++环境），常用的如Visual Studio系列。我这里演示所用的是更简洁的Visual C++ 6.0。</p><h1 id="编译器中输入轰炸代码"><a href="#编译器中输入轰炸代码" class="headerlink" title="编译器中输入轰炸代码"></a>编译器中输入轰炸代码</h1><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">char name[100];</span><br><span class="line">printf(&quot;输入你想要轰炸的对象名称：&quot;);</span><br><span class="line">scanf(&quot;%s&quot;, &amp;name, 40);</span><br><span class="line">printf(&quot;请输入你要轰炸的次数：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;, &amp;i);</span><br><span class="line">HWND H &#x3D; FindWindow(0, name);</span><br><span class="line">while (i-- &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">SendMessage(H, WM_PASTE, 0, 0);</span><br><span class="line">SendMessage(H, WM_KEYDOWN, VK_RETURN, 0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/2.jpg"></p><h2 id="需要注意的是"><a href="#需要注意的是" class="headerlink" title="需要注意的是:"></a>需要注意的是:</h2><div class="note warning flat"><p>要打开轰炸对象的QQ对话窗口，且必须是一个独立的窗口，不能合并。将需要轰炸的图片或消息复制下来即可。</p></div><h1 id="友情提醒"><a href="#友情提醒" class="headerlink" title="友情提醒"></a>友情提醒</h1><div class="tip warning"><p>QQ消息轰炸操作需谨慎，易激起对方情绪。若轰炸次数过多可能会被官方作封号若干天处理</p><p></p></div>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
          <category> QQ轰炸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> 博客开通致辞</title>
      <link href="article/32027959.html"/>
      <url>article/32027959.html</url>
      
        <content type="html"><![CDATA[<p>本博客得以开通，特别感谢哔哩哔哩，CSDN，以及知乎大佬们的指导。同时，特别感谢任同学的亲自指导和示范。</p><p>本人软件工程专业大一在读，此博客主要记录我的学习经历以及生活日常，欢迎各位游客前来浏览。</p><p>同时，对于本博客中的所有文章，若有异议或者疑问，欢迎您的指正或咨询。本人唯一联系QQ：<font color="orange">1532518617</font><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/5d761484a9b49.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 初 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
